{
  "version": 3,
  "sources": ["../../../app/routes/account.password.tsx", "../../../app/components/SuccessMessage.tsx", "../../../app/utils/validation-helper.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/account.password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/account.password.tsx\");\n  import.meta.hot.lastModified = \"1745508918461.4502\";\n}\n// REMIX HMR END\n\nimport { PencilIcon } from '@heroicons/react/24/outline';\nimport { useActionData, useNavigation } from '@remix-run/react';\nimport { json } from '@remix-run/server-runtime';\nimport { withZod } from '@remix-validated-form/with-zod';\nimport { useEffect, useRef, useState } from 'react';\nimport { ValidatedForm, validationError } from 'remix-validated-form';\nimport { z } from 'zod';\nimport { Button } from '~/components/Button';\nimport { ErrorMessage } from '~/components/ErrorMessage';\nimport { HighlightedButton } from '~/components/HighlightedButton';\nimport { Input } from '~/components/Input';\nimport { SuccessMessage } from '~/components/SuccessMessage';\nimport { updateCustomerPassword } from '~/providers/account/account';\nimport { isErrorResult, isValidationErrorResponseData } from '~/utils/validation-helper';\nimport { useTranslation } from 'react-i18next';\nexport const validator = withZod(z.object({\n  currentPassword: z.string().min(1, {\n    message: 'Password is required'\n  }),\n  newPassword: z.string().min(1, {\n    message: 'Password is required'\n  }),\n  confirmPassword: z.string().min(1, {\n    message: 'Password is required'\n  })\n}).refine(({\n  newPassword,\n  confirmPassword\n}) => newPassword === confirmPassword, {\n  path: ['confirmPassword'],\n  message: 'Passwords must match'\n}));\nexport async function action({\n  request\n}) {\n  const body = await request.formData();\n  const result = await validator.validate(body);\n  if (result.error) {\n    return validationError(result.error);\n  }\n  const {\n    currentPassword,\n    newPassword\n  } = result.data;\n  const res = await updateCustomerPassword({\n    currentPassword,\n    newPassword\n  }, {\n    request\n  });\n  if (res.__typename !== 'Success') {\n    return json(res, {\n      status: 401\n    });\n  }\n  return json(res);\n}\nexport default function AccountPassword() {\n  _s();\n  const [editing, setEditing] = useState(false);\n  const [isSaved, setIsSaved] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n  const actionDataHook = useActionData();\n  const {\n    state\n  } = useNavigation();\n  const formRef = useRef(null);\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    if (isValidationErrorResponseData(actionDataHook)) {\n      // no additional handling\n      return;\n    }\n    if (isErrorResult(actionDataHook)) {\n      // set error message\n      setErrorMessage(actionDataHook.message);\n      setIsSaved(false);\n      return;\n    }\n    if (actionDataHook?.success) {\n      // show success message and reset form\n      setErrorMessage(undefined);\n      setIsSaved(true);\n      setEditing(false);\n      formRef.current?.reset();\n    }\n  }, [actionDataHook]);\n  return <ValidatedForm validator={validator} method=\"post\" formRef={formRef}>\n      <div className=\"p-4 space-y-4\">\n        {editing && <>\n            <div className=\"gap-4 grid grid-cols-1 md:grid-cols-2\">\n              <div>\n                <Input required label={t('account.currentPassword')} name=\"currentPassword\" type=\"password\" />\n              </div>\n            </div>\n            <div className=\"gap-4 grid grid-cols-1 md:grid-cols-2\">\n              <div>\n                <Input required label={t('account.newPassword')} name=\"newPassword\" type=\"password\" />\n              </div>\n              <div>\n                <Input required label={t('account.confirmPassword')} name=\"confirmPassword\" type=\"password\" />\n              </div>\n            </div>\n          </>}\n        {isSaved && <SuccessMessage heading={t('account.pwdSuccessHeading')} message={t('account.pwdSuccessMessage')} />}\n        {errorMessage && <ErrorMessage heading={t('account.pwdErrorMessage')} message={errorMessage} />}\n        {editing ? <div className=\"flex gap-3\">\n            <HighlightedButton type=\"submit\" isSubmitting={state === 'submitting'}>\n              {t('account.savePassword')}\n            </HighlightedButton>\n            <Button type=\"reset\" onClick={() => setEditing(false)}>\n              {t('common.cancel')}\n            </Button>\n          </div> : <>\n            <HighlightedButton type=\"button\" onClick={() => setEditing(true)}>\n              <PencilIcon className=\"w-4 h-4\" /> {t('account.changePassword')}\n            </HighlightedButton>\n          </>}\n      </div>\n    </ValidatedForm>;\n}\n_s(AccountPassword, \"jTV2vI/jeAViafC6R1KT0X6p7vQ=\", false, function () {\n  return [useActionData, useNavigation, useTranslation];\n});\n_c = AccountPassword;\nvar _c;\n$RefreshReg$(_c, \"AccountPassword\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/SuccessMessage.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/SuccessMessage.tsx\");\n  import.meta.hot.lastModified = \"1745508918455.158\";\n}\n// REMIX HMR END\n\nimport { CheckIcon } from '@heroicons/react/24/solid';\nexport function SuccessMessage({\n  heading,\n  message\n}) {\n  return <div className=\"rounded-md bg-green-50 p-4 max-w-lg\">\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <CheckIcon className=\"h-5 w-5 text-green-400\" aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3\">\n          <h3 className=\"text-sm font-medium text-green-800\">{heading}</h3>\n          <p className=\"text-sm text-green-700 mt-2\">{message}</p>\n        </div>\n      </div>\n    </div>;\n}\n_c = SuccessMessage;\nvar _c;\n$RefreshReg$(_c, \"SuccessMessage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/validation-helper.ts\"\n);\nimport.meta.hot.lastModified = \"1745508918464.277\";\n}\n// REMIX HMR END\n\nimport { ValidationErrorResponseData } from \"remix-validated-form\";\nimport { ErrorResult } from \"~/generated/graphql\";\n\nexport function isErrorResult(input: any): input is ErrorResult {\n    return input && (input as ErrorResult).message !== undefined && (input as ErrorResult).errorCode !== undefined;\n}\n\nexport function isValidationErrorResponseData(input: any): input is ValidationErrorResponseData {\n    return input && (input as ValidationErrorResponseData).fieldErrors !== undefined;\n}"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_c"]
}
