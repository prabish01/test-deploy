{
  "version": 3,
  "sources": ["../../../app/components/account/CustomerAddressForm.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/account/CustomerAddressForm.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/account/CustomerAddressForm.tsx\");\n  import.meta.hot.lastModified = \"1745508918455.4546\";\n}\n// REMIX HMR END\n\nimport { withZod } from '@remix-validated-form/with-zod';\nimport { z } from 'zod';\nimport { ValidatedForm } from 'remix-validated-form';\nimport { Input } from '~/components/Input';\nimport { Select } from '~/components/Select';\nimport { useTranslation } from 'react-i18next';\nexport const validator = withZod(z.object({\n  fullName: z.string().min(1, {\n    message: 'Name is required'\n  }),\n  city: z.string(),\n  countryCode: z.string().min(1, {\n    message: 'Country is required'\n  }),\n  postalCode: z.string(),\n  province: z.string(),\n  streetLine1: z.string().min(1, {\n    message: 'Address is required'\n  }),\n  streetLine2: z.string(),\n  phone: z.string(),\n  company: z.string()\n}));\nexport default function CustomerAddressForm({\n  address,\n  formRef,\n  submit,\n  availableCountries\n}) {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  return <ValidatedForm id=\"editAddressForm\" validator={validator} formRef={formRef} method=\"post\" onSubmit={submit} defaultValues={{\n    fullName: address?.fullName || undefined,\n    city: address?.city || undefined,\n    streetLine1: address?.streetLine1 || undefined,\n    streetLine2: address?.streetLine2 || undefined,\n    countryCode: address?.country?.code || undefined,\n    postalCode: address?.postalCode || undefined,\n    phone: address?.phoneNumber || undefined,\n    company: address?.company || undefined,\n    province: address?.province || undefined\n  }}>\n      <input type=\"hidden\" name=\"intent\" value=\"updateAddress\" />\n      <div className=\"grid grid-cols-1 gap-y-2 my-8\">\n        <div className=\"grid grid-cols-2 gap-x-2\">\n          <Input label={t('account.fullName')} name=\"fullName\" required autoComplete=\"full-name\" />\n        </div>\n        <Input label={t('address.company')} name=\"company\" />\n        <Input label={t('address.streetLine1')} name=\"streetLine1\" required autoComplete=\"address-line1\" />\n        <Input label={t('address.streetLine2')} name=\"streetLine2\" autoComplete=\"address-line2\" />\n        <div className=\"grid grid-cols-[144px_1fr] gap-x-2\">\n          <Input label={t('address.postalCode')} name=\"postalCode\" required autoComplete=\"postal-code\" />\n          <Input label={t('address.city')} name=\"city\" required autoComplete=\"locality\" />\n        </div>\n        <Input label={t('address.province')} name=\"province\" autoComplete=\"address-level1\" />\n        <Select name=\"countryCode\" autoComplete=\"country\" placeholder={t('address.selectCountry')} required label=\"Country\">\n          {availableCountries?.map(country => <option key={country.id} value={country.code}>\n              {country.name}\n            </option>)}\n        </Select>\n        <Input label={t('address.phoneNumber')} name=\"phone\" autoComplete=\"phone\" />\n        <input type=\"submit\" hidden />\n      </div>\n    </ValidatedForm>;\n}\n_s(CustomerAddressForm, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n_c = CustomerAddressForm;\nvar _c;\n$RefreshReg$(_c, \"CustomerAddressForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
