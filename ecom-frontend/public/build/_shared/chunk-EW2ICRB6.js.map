{
  "version": 3,
  "sources": ["../../../node_modules/tslib/tslib.es6.mjs", "../../../node_modules/graphql/jsutils/devAssert.mjs", "../../../node_modules/graphql/jsutils/isObjectLike.mjs", "../../../node_modules/graphql/jsutils/invariant.mjs", "../../../node_modules/graphql/language/location.mjs", "../../../node_modules/graphql/language/printLocation.mjs", "../../../node_modules/graphql/error/GraphQLError.mjs", "../../../node_modules/graphql/error/syntaxError.mjs", "../../../node_modules/graphql/language/ast.mjs", "../../../node_modules/graphql/language/directiveLocation.mjs", "../../../node_modules/graphql/language/kinds.mjs", "../../../node_modules/graphql/language/characterClasses.mjs", "../../../node_modules/graphql/language/blockString.mjs", "../../../node_modules/graphql/language/tokenKind.mjs", "../../../node_modules/graphql/language/lexer.mjs", "../../../node_modules/graphql/jsutils/inspect.mjs", "../../../node_modules/graphql/jsutils/instanceOf.mjs", "../../../node_modules/graphql/language/source.mjs", "../../../node_modules/graphql/language/parser.mjs", "../../../node_modules/graphql/language/printString.mjs", "../../../node_modules/graphql/language/visitor.mjs", "../../../node_modules/graphql/language/printer.mjs", "../../../node_modules/graphql-tag/src/index.ts", "../../../app/generated/graphql.ts"],
  "sourcesContent": ["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/generated/graphql.ts\"\n);\nimport.meta.hot.lastModified = \"1745509856707.534\";\n}\n// REMIX HMR END\n\nimport { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSON: any;\n  /** The `Money` scalar type represents monetary values and supports signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */\n  Money: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type ActiveOrderResult = NoActiveOrderError | Order;\n\nexport type AddPaymentToOrderResult = IneligiblePaymentMethodError | NoActiveOrderError | Order | OrderPaymentStateError | OrderStateTransitionError | PaymentDeclinedError | PaymentFailedError;\n\nexport type Address = Node & {\n  __typename?: 'Address';\n  city?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  country: Country;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  defaultBillingAddress?: Maybe<Scalars['Boolean']>;\n  defaultShippingAddress?: Maybe<Scalars['Boolean']>;\n  fullName?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  postalCode?: Maybe<Scalars['String']>;\n  province?: Maybe<Scalars['String']>;\n  streetLine1: Scalars['String'];\n  streetLine2?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Adjustment = {\n  __typename?: 'Adjustment';\n  adjustmentSource: Scalars['String'];\n  amount: Scalars['Money'];\n  data?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  type: AdjustmentType;\n};\n\nexport enum AdjustmentType {\n  DistributedOrderPromotion = 'DISTRIBUTED_ORDER_PROMOTION',\n  Other = 'OTHER',\n  Promotion = 'PROMOTION'\n}\n\n/** Returned when attempting to set the Customer for an Order when already logged in. */\nexport type AlreadyLoggedInError = ErrorResult & {\n  __typename?: 'AlreadyLoggedInError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type ApplyCouponCodeResult = CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError | Order;\n\nexport type Asset = Node & {\n  __typename?: 'Asset';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  fileSize: Scalars['Int'];\n  focalPoint?: Maybe<Coordinate>;\n  height: Scalars['Int'];\n  id: Scalars['ID'];\n  mimeType: Scalars['String'];\n  name: Scalars['String'];\n  preview: Scalars['String'];\n  source: Scalars['String'];\n  tags: Array<Tag>;\n  type: AssetType;\n  updatedAt: Scalars['DateTime'];\n  width: Scalars['Int'];\n};\n\nexport type AssetList = PaginatedList & {\n  __typename?: 'AssetList';\n  items: Array<Asset>;\n  totalItems: Scalars['Int'];\n};\n\nexport enum AssetType {\n  Binary = 'BINARY',\n  Image = 'IMAGE',\n  Video = 'VIDEO'\n}\n\nexport type AuthenticationInput = {\n  native?: InputMaybe<NativeAuthInput>;\n};\n\nexport type AuthenticationMethod = Node & {\n  __typename?: 'AuthenticationMethod';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  strategy: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type AuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError;\n\nexport type BooleanCustomFieldConfig = CustomField & {\n  __typename?: 'BooleanCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\n/** Operators for filtering on a list of Boolean fields */\nexport type BooleanListOperators = {\n  inList: Scalars['Boolean'];\n};\n\n/** Operators for filtering on a Boolean field */\nexport type BooleanOperators = {\n  eq?: InputMaybe<Scalars['Boolean']>;\n  isNull?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type Channel = Node & {\n  __typename?: 'Channel';\n  availableCurrencyCodes: Array<CurrencyCode>;\n  availableLanguageCodes?: Maybe<Array<LanguageCode>>;\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  /** @deprecated Use defaultCurrencyCode instead */\n  currencyCode: CurrencyCode;\n  customFields?: Maybe<Scalars['JSON']>;\n  defaultCurrencyCode: CurrencyCode;\n  defaultLanguageCode: LanguageCode;\n  defaultShippingZone?: Maybe<Zone>;\n  defaultTaxZone?: Maybe<Zone>;\n  id: Scalars['ID'];\n  /** Not yet used - will be implemented in a future release. */\n  outOfStockThreshold?: Maybe<Scalars['Int']>;\n  pricesIncludeTax: Scalars['Boolean'];\n  seller?: Maybe<Seller>;\n  token: Scalars['String'];\n  /** Not yet used - will be implemented in a future release. */\n  trackInventory?: Maybe<Scalars['Boolean']>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Collection = Node & {\n  __typename?: 'Collection';\n  assets: Array<Asset>;\n  breadcrumbs: Array<CollectionBreadcrumb>;\n  children?: Maybe<Array<Collection>>;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  featuredAsset?: Maybe<Asset>;\n  filters: Array<ConfigurableOperation>;\n  id: Scalars['ID'];\n  languageCode?: Maybe<LanguageCode>;\n  name: Scalars['String'];\n  parent?: Maybe<Collection>;\n  parentId: Scalars['ID'];\n  position: Scalars['Int'];\n  productVariants: ProductVariantList;\n  slug: Scalars['String'];\n  translations: Array<CollectionTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CollectionProductVariantsArgs = {\n  options?: InputMaybe<ProductVariantListOptions>;\n};\n\nexport type CollectionBreadcrumb = {\n  __typename?: 'CollectionBreadcrumb';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n};\n\nexport type CollectionFilterParameter = {\n  _and?: InputMaybe<Array<CollectionFilterParameter>>;\n  _or?: InputMaybe<Array<CollectionFilterParameter>>;\n  createdAt?: InputMaybe<DateOperators>;\n  description?: InputMaybe<StringOperators>;\n  id?: InputMaybe<IdOperators>;\n  languageCode?: InputMaybe<StringOperators>;\n  name?: InputMaybe<StringOperators>;\n  parentId?: InputMaybe<IdOperators>;\n  position?: InputMaybe<NumberOperators>;\n  slug?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type CollectionList = PaginatedList & {\n  __typename?: 'CollectionList';\n  items: Array<Collection>;\n  totalItems: Scalars['Int'];\n};\n\nexport type CollectionListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<CollectionFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<CollectionSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n  topLevelOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n/**\n * Which Collections are present in the products returned\n * by the search, and in what quantity.\n */\nexport type CollectionResult = {\n  __typename?: 'CollectionResult';\n  collection: Collection;\n  count: Scalars['Int'];\n};\n\nexport type CollectionSortParameter = {\n  createdAt?: InputMaybe<SortOrder>;\n  description?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  name?: InputMaybe<SortOrder>;\n  parentId?: InputMaybe<SortOrder>;\n  position?: InputMaybe<SortOrder>;\n  slug?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport type CollectionTranslation = {\n  __typename?: 'CollectionTranslation';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ConfigArg = {\n  __typename?: 'ConfigArg';\n  name: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type ConfigArgDefinition = {\n  __typename?: 'ConfigArgDefinition';\n  defaultValue?: Maybe<Scalars['JSON']>;\n  description?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  required: Scalars['Boolean'];\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type ConfigArgInput = {\n  name: Scalars['String'];\n  /** A JSON stringified representation of the actual value */\n  value: Scalars['String'];\n};\n\nexport type ConfigurableOperation = {\n  __typename?: 'ConfigurableOperation';\n  args: Array<ConfigArg>;\n  code: Scalars['String'];\n};\n\nexport type ConfigurableOperationDefinition = {\n  __typename?: 'ConfigurableOperationDefinition';\n  args: Array<ConfigArgDefinition>;\n  code: Scalars['String'];\n  description: Scalars['String'];\n};\n\nexport type ConfigurableOperationInput = {\n  arguments: Array<ConfigArgInput>;\n  code: Scalars['String'];\n};\n\nexport type Coordinate = {\n  __typename?: 'Coordinate';\n  x: Scalars['Float'];\n  y: Scalars['Float'];\n};\n\n/**\n * A Country of the world which your shop operates in.\n *\n * The `code` field is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc. This code is used in certain inputs such as\n * `UpdateAddressInput` and `CreateAddressInput` to specify the country.\n */\nexport type Country = Node & Region & {\n  __typename?: 'Country';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  parent?: Maybe<Region>;\n  parentId?: Maybe<Scalars['ID']>;\n  translations: Array<RegionTranslation>;\n  type: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type CountryList = PaginatedList & {\n  __typename?: 'CountryList';\n  items: Array<Country>;\n  totalItems: Scalars['Int'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeExpiredError = ErrorResult & {\n  __typename?: 'CouponCodeExpiredError';\n  couponCode: Scalars['String'];\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeInvalidError = ErrorResult & {\n  __typename?: 'CouponCodeInvalidError';\n  couponCode: Scalars['String'];\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned if the provided coupon code is invalid */\nexport type CouponCodeLimitError = ErrorResult & {\n  __typename?: 'CouponCodeLimitError';\n  couponCode: Scalars['String'];\n  errorCode: ErrorCode;\n  limit: Scalars['Int'];\n  message: Scalars['String'];\n};\n\n/**\n * Input used to create an Address.\n *\n * The countryCode must correspond to a `code` property of a Country that has been defined in the\n * Vendure server. The `code` property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\n * If an invalid code is passed, the mutation will fail.\n */\nexport type CreateAddressInput = {\n  city?: InputMaybe<Scalars['String']>;\n  company?: InputMaybe<Scalars['String']>;\n  countryCode: Scalars['String'];\n  customFields?: InputMaybe<Scalars['JSON']>;\n  defaultBillingAddress?: InputMaybe<Scalars['Boolean']>;\n  defaultShippingAddress?: InputMaybe<Scalars['Boolean']>;\n  fullName?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  postalCode?: InputMaybe<Scalars['String']>;\n  province?: InputMaybe<Scalars['String']>;\n  streetLine1: Scalars['String'];\n  streetLine2?: InputMaybe<Scalars['String']>;\n};\n\nexport type CreateCustomerInput = {\n  customFields?: InputMaybe<Scalars['JSON']>;\n  emailAddress: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/**\n * @description\n * ISO 4217 currency code\n *\n * @docsCategory common\n */\nexport enum CurrencyCode {\n  /** United Arab Emirates dirham */\n  Aed = 'AED',\n  /** Afghan afghani */\n  Afn = 'AFN',\n  /** Albanian lek */\n  All = 'ALL',\n  /** Armenian dram */\n  Amd = 'AMD',\n  /** Netherlands Antillean guilder */\n  Ang = 'ANG',\n  /** Angolan kwanza */\n  Aoa = 'AOA',\n  /** Argentine peso */\n  Ars = 'ARS',\n  /** Australian dollar */\n  Aud = 'AUD',\n  /** Aruban florin */\n  Awg = 'AWG',\n  /** Azerbaijani manat */\n  Azn = 'AZN',\n  /** Bosnia and Herzegovina convertible mark */\n  Bam = 'BAM',\n  /** Barbados dollar */\n  Bbd = 'BBD',\n  /** Bangladeshi taka */\n  Bdt = 'BDT',\n  /** Bulgarian lev */\n  Bgn = 'BGN',\n  /** Bahraini dinar */\n  Bhd = 'BHD',\n  /** Burundian franc */\n  Bif = 'BIF',\n  /** Bermudian dollar */\n  Bmd = 'BMD',\n  /** Brunei dollar */\n  Bnd = 'BND',\n  /** Boliviano */\n  Bob = 'BOB',\n  /** Brazilian real */\n  Brl = 'BRL',\n  /** Bahamian dollar */\n  Bsd = 'BSD',\n  /** Bhutanese ngultrum */\n  Btn = 'BTN',\n  /** Botswana pula */\n  Bwp = 'BWP',\n  /** Belarusian ruble */\n  Byn = 'BYN',\n  /** Belize dollar */\n  Bzd = 'BZD',\n  /** Canadian dollar */\n  Cad = 'CAD',\n  /** Congolese franc */\n  Cdf = 'CDF',\n  /** Swiss franc */\n  Chf = 'CHF',\n  /** Chilean peso */\n  Clp = 'CLP',\n  /** Renminbi (Chinese) yuan */\n  Cny = 'CNY',\n  /** Colombian peso */\n  Cop = 'COP',\n  /** Costa Rican colon */\n  Crc = 'CRC',\n  /** Cuban convertible peso */\n  Cuc = 'CUC',\n  /** Cuban peso */\n  Cup = 'CUP',\n  /** Cape Verde escudo */\n  Cve = 'CVE',\n  /** Czech koruna */\n  Czk = 'CZK',\n  /** Djiboutian franc */\n  Djf = 'DJF',\n  /** Danish krone */\n  Dkk = 'DKK',\n  /** Dominican peso */\n  Dop = 'DOP',\n  /** Algerian dinar */\n  Dzd = 'DZD',\n  /** Egyptian pound */\n  Egp = 'EGP',\n  /** Eritrean nakfa */\n  Ern = 'ERN',\n  /** Ethiopian birr */\n  Etb = 'ETB',\n  /** Euro */\n  Eur = 'EUR',\n  /** Fiji dollar */\n  Fjd = 'FJD',\n  /** Falkland Islands pound */\n  Fkp = 'FKP',\n  /** Pound sterling */\n  Gbp = 'GBP',\n  /** Georgian lari */\n  Gel = 'GEL',\n  /** Ghanaian cedi */\n  Ghs = 'GHS',\n  /** Gibraltar pound */\n  Gip = 'GIP',\n  /** Gambian dalasi */\n  Gmd = 'GMD',\n  /** Guinean franc */\n  Gnf = 'GNF',\n  /** Guatemalan quetzal */\n  Gtq = 'GTQ',\n  /** Guyanese dollar */\n  Gyd = 'GYD',\n  /** Hong Kong dollar */\n  Hkd = 'HKD',\n  /** Honduran lempira */\n  Hnl = 'HNL',\n  /** Croatian kuna */\n  Hrk = 'HRK',\n  /** Haitian gourde */\n  Htg = 'HTG',\n  /** Hungarian forint */\n  Huf = 'HUF',\n  /** Indonesian rupiah */\n  Idr = 'IDR',\n  /** Israeli new shekel */\n  Ils = 'ILS',\n  /** Indian rupee */\n  Inr = 'INR',\n  /** Iraqi dinar */\n  Iqd = 'IQD',\n  /** Iranian rial */\n  Irr = 'IRR',\n  /** Icelandic kr\u00F3na */\n  Isk = 'ISK',\n  /** Jamaican dollar */\n  Jmd = 'JMD',\n  /** Jordanian dinar */\n  Jod = 'JOD',\n  /** Japanese yen */\n  Jpy = 'JPY',\n  /** Kenyan shilling */\n  Kes = 'KES',\n  /** Kyrgyzstani som */\n  Kgs = 'KGS',\n  /** Cambodian riel */\n  Khr = 'KHR',\n  /** Comoro franc */\n  Kmf = 'KMF',\n  /** North Korean won */\n  Kpw = 'KPW',\n  /** South Korean won */\n  Krw = 'KRW',\n  /** Kuwaiti dinar */\n  Kwd = 'KWD',\n  /** Cayman Islands dollar */\n  Kyd = 'KYD',\n  /** Kazakhstani tenge */\n  Kzt = 'KZT',\n  /** Lao kip */\n  Lak = 'LAK',\n  /** Lebanese pound */\n  Lbp = 'LBP',\n  /** Sri Lankan rupee */\n  Lkr = 'LKR',\n  /** Liberian dollar */\n  Lrd = 'LRD',\n  /** Lesotho loti */\n  Lsl = 'LSL',\n  /** Libyan dinar */\n  Lyd = 'LYD',\n  /** Moroccan dirham */\n  Mad = 'MAD',\n  /** Moldovan leu */\n  Mdl = 'MDL',\n  /** Malagasy ariary */\n  Mga = 'MGA',\n  /** Macedonian denar */\n  Mkd = 'MKD',\n  /** Myanmar kyat */\n  Mmk = 'MMK',\n  /** Mongolian t\u00F6gr\u00F6g */\n  Mnt = 'MNT',\n  /** Macanese pataca */\n  Mop = 'MOP',\n  /** Mauritanian ouguiya */\n  Mru = 'MRU',\n  /** Mauritian rupee */\n  Mur = 'MUR',\n  /** Maldivian rufiyaa */\n  Mvr = 'MVR',\n  /** Malawian kwacha */\n  Mwk = 'MWK',\n  /** Mexican peso */\n  Mxn = 'MXN',\n  /** Malaysian ringgit */\n  Myr = 'MYR',\n  /** Mozambican metical */\n  Mzn = 'MZN',\n  /** Namibian dollar */\n  Nad = 'NAD',\n  /** Nigerian naira */\n  Ngn = 'NGN',\n  /** Nicaraguan c\u00F3rdoba */\n  Nio = 'NIO',\n  /** Norwegian krone */\n  Nok = 'NOK',\n  /** Nepalese rupee */\n  Npr = 'NPR',\n  /** New Zealand dollar */\n  Nzd = 'NZD',\n  /** Omani rial */\n  Omr = 'OMR',\n  /** Panamanian balboa */\n  Pab = 'PAB',\n  /** Peruvian sol */\n  Pen = 'PEN',\n  /** Papua New Guinean kina */\n  Pgk = 'PGK',\n  /** Philippine peso */\n  Php = 'PHP',\n  /** Pakistani rupee */\n  Pkr = 'PKR',\n  /** Polish z\u0142oty */\n  Pln = 'PLN',\n  /** Paraguayan guaran\u00ED */\n  Pyg = 'PYG',\n  /** Qatari riyal */\n  Qar = 'QAR',\n  /** Romanian leu */\n  Ron = 'RON',\n  /** Serbian dinar */\n  Rsd = 'RSD',\n  /** Russian ruble */\n  Rub = 'RUB',\n  /** Rwandan franc */\n  Rwf = 'RWF',\n  /** Saudi riyal */\n  Sar = 'SAR',\n  /** Solomon Islands dollar */\n  Sbd = 'SBD',\n  /** Seychelles rupee */\n  Scr = 'SCR',\n  /** Sudanese pound */\n  Sdg = 'SDG',\n  /** Swedish krona/kronor */\n  Sek = 'SEK',\n  /** Singapore dollar */\n  Sgd = 'SGD',\n  /** Saint Helena pound */\n  Shp = 'SHP',\n  /** Sierra Leonean leone */\n  Sll = 'SLL',\n  /** Somali shilling */\n  Sos = 'SOS',\n  /** Surinamese dollar */\n  Srd = 'SRD',\n  /** South Sudanese pound */\n  Ssp = 'SSP',\n  /** S\u00E3o Tom\u00E9 and Pr\u00EDncipe dobra */\n  Stn = 'STN',\n  /** Salvadoran col\u00F3n */\n  Svc = 'SVC',\n  /** Syrian pound */\n  Syp = 'SYP',\n  /** Swazi lilangeni */\n  Szl = 'SZL',\n  /** Thai baht */\n  Thb = 'THB',\n  /** Tajikistani somoni */\n  Tjs = 'TJS',\n  /** Turkmenistan manat */\n  Tmt = 'TMT',\n  /** Tunisian dinar */\n  Tnd = 'TND',\n  /** Tongan pa\u02BBanga */\n  Top = 'TOP',\n  /** Turkish lira */\n  Try = 'TRY',\n  /** Trinidad and Tobago dollar */\n  Ttd = 'TTD',\n  /** New Taiwan dollar */\n  Twd = 'TWD',\n  /** Tanzanian shilling */\n  Tzs = 'TZS',\n  /** Ukrainian hryvnia */\n  Uah = 'UAH',\n  /** Ugandan shilling */\n  Ugx = 'UGX',\n  /** United States dollar */\n  Usd = 'USD',\n  /** Uruguayan peso */\n  Uyu = 'UYU',\n  /** Uzbekistan som */\n  Uzs = 'UZS',\n  /** Venezuelan bol\u00EDvar soberano */\n  Ves = 'VES',\n  /** Vietnamese \u0111\u1ED3ng */\n  Vnd = 'VND',\n  /** Vanuatu vatu */\n  Vuv = 'VUV',\n  /** Samoan tala */\n  Wst = 'WST',\n  /** CFA franc BEAC */\n  Xaf = 'XAF',\n  /** East Caribbean dollar */\n  Xcd = 'XCD',\n  /** CFA franc BCEAO */\n  Xof = 'XOF',\n  /** CFP franc (franc Pacifique) */\n  Xpf = 'XPF',\n  /** Yemeni rial */\n  Yer = 'YER',\n  /** South African rand */\n  Zar = 'ZAR',\n  /** Zambian kwacha */\n  Zmw = 'ZMW',\n  /** Zimbabwean dollar */\n  Zwl = 'ZWL'\n}\n\nexport type CurrentUser = {\n  __typename?: 'CurrentUser';\n  channels: Array<CurrentUserChannel>;\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n};\n\nexport type CurrentUserChannel = {\n  __typename?: 'CurrentUserChannel';\n  code: Scalars['String'];\n  id: Scalars['ID'];\n  permissions: Array<Permission>;\n  token: Scalars['String'];\n};\n\nexport type CustomField = {\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type CustomFieldConfig = BooleanCustomFieldConfig | DateTimeCustomFieldConfig | FloatCustomFieldConfig | IntCustomFieldConfig | LocaleStringCustomFieldConfig | LocaleTextCustomFieldConfig | RelationCustomFieldConfig | StringCustomFieldConfig | TextCustomFieldConfig;\n\nexport type Customer = Node & {\n  __typename?: 'Customer';\n  addresses?: Maybe<Array<Address>>;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  emailAddress: Scalars['String'];\n  firstName: Scalars['String'];\n  id: Scalars['ID'];\n  lastName: Scalars['String'];\n  orders: OrderList;\n  phoneNumber?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['DateTime'];\n  user?: Maybe<User>;\n};\n\n\nexport type CustomerOrdersArgs = {\n  options?: InputMaybe<OrderListOptions>;\n};\n\nexport type CustomerFilterParameter = {\n  _and?: InputMaybe<Array<CustomerFilterParameter>>;\n  _or?: InputMaybe<Array<CustomerFilterParameter>>;\n  createdAt?: InputMaybe<DateOperators>;\n  emailAddress?: InputMaybe<StringOperators>;\n  firstName?: InputMaybe<StringOperators>;\n  id?: InputMaybe<IdOperators>;\n  lastName?: InputMaybe<StringOperators>;\n  phoneNumber?: InputMaybe<StringOperators>;\n  title?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type CustomerGroup = Node & {\n  __typename?: 'CustomerGroup';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  customers: CustomerList;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CustomerGroupCustomersArgs = {\n  options?: InputMaybe<CustomerListOptions>;\n};\n\nexport type CustomerList = PaginatedList & {\n  __typename?: 'CustomerList';\n  items: Array<Customer>;\n  totalItems: Scalars['Int'];\n};\n\nexport type CustomerListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<CustomerFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<CustomerSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\nexport type CustomerSortParameter = {\n  createdAt?: InputMaybe<SortOrder>;\n  emailAddress?: InputMaybe<SortOrder>;\n  firstName?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  lastName?: InputMaybe<SortOrder>;\n  phoneNumber?: InputMaybe<SortOrder>;\n  title?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\n/** Operators for filtering on a list of Date fields */\nexport type DateListOperators = {\n  inList: Scalars['DateTime'];\n};\n\n/** Operators for filtering on a DateTime field */\nexport type DateOperators = {\n  after?: InputMaybe<Scalars['DateTime']>;\n  before?: InputMaybe<Scalars['DateTime']>;\n  between?: InputMaybe<DateRange>;\n  eq?: InputMaybe<Scalars['DateTime']>;\n  isNull?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type DateRange = {\n  end: Scalars['DateTime'];\n  start: Scalars['DateTime'];\n};\n\n/**\n * Expects the same validation formats as the `<input type=\"datetime-local\">` HTML element.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes\n */\nexport type DateTimeCustomFieldConfig = CustomField & {\n  __typename?: 'DateTimeCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  max?: Maybe<Scalars['String']>;\n  min?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  step?: Maybe<Scalars['Int']>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type DeletionResponse = {\n  __typename?: 'DeletionResponse';\n  message?: Maybe<Scalars['String']>;\n  result: DeletionResult;\n};\n\nexport enum DeletionResult {\n  /** The entity was successfully deleted */\n  Deleted = 'DELETED',\n  /** Deletion did not take place, reason given in message */\n  NotDeleted = 'NOT_DELETED'\n}\n\nexport type Discount = {\n  __typename?: 'Discount';\n  adjustmentSource: Scalars['String'];\n  amount: Scalars['Money'];\n  amountWithTax: Scalars['Money'];\n  description: Scalars['String'];\n  type: AdjustmentType;\n};\n\n/** Returned when attempting to create a Customer with an email address already registered to an existing User. */\nexport type EmailAddressConflictError = ErrorResult & {\n  __typename?: 'EmailAddressConflictError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport enum ErrorCode {\n  AlreadyLoggedInError = 'ALREADY_LOGGED_IN_ERROR',\n  CouponCodeExpiredError = 'COUPON_CODE_EXPIRED_ERROR',\n  CouponCodeInvalidError = 'COUPON_CODE_INVALID_ERROR',\n  CouponCodeLimitError = 'COUPON_CODE_LIMIT_ERROR',\n  EmailAddressConflictError = 'EMAIL_ADDRESS_CONFLICT_ERROR',\n  GuestCheckoutError = 'GUEST_CHECKOUT_ERROR',\n  IdentifierChangeTokenExpiredError = 'IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR',\n  IdentifierChangeTokenInvalidError = 'IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR',\n  IneligiblePaymentMethodError = 'INELIGIBLE_PAYMENT_METHOD_ERROR',\n  IneligibleShippingMethodError = 'INELIGIBLE_SHIPPING_METHOD_ERROR',\n  InsufficientStockError = 'INSUFFICIENT_STOCK_ERROR',\n  InvalidCredentialsError = 'INVALID_CREDENTIALS_ERROR',\n  MissingPasswordError = 'MISSING_PASSWORD_ERROR',\n  NativeAuthStrategyError = 'NATIVE_AUTH_STRATEGY_ERROR',\n  NegativeQuantityError = 'NEGATIVE_QUANTITY_ERROR',\n  NotVerifiedError = 'NOT_VERIFIED_ERROR',\n  NoActiveOrderError = 'NO_ACTIVE_ORDER_ERROR',\n  OrderLimitError = 'ORDER_LIMIT_ERROR',\n  OrderModificationError = 'ORDER_MODIFICATION_ERROR',\n  OrderPaymentStateError = 'ORDER_PAYMENT_STATE_ERROR',\n  OrderStateTransitionError = 'ORDER_STATE_TRANSITION_ERROR',\n  PasswordAlreadySetError = 'PASSWORD_ALREADY_SET_ERROR',\n  PasswordResetTokenExpiredError = 'PASSWORD_RESET_TOKEN_EXPIRED_ERROR',\n  PasswordResetTokenInvalidError = 'PASSWORD_RESET_TOKEN_INVALID_ERROR',\n  PasswordValidationError = 'PASSWORD_VALIDATION_ERROR',\n  PaymentDeclinedError = 'PAYMENT_DECLINED_ERROR',\n  PaymentFailedError = 'PAYMENT_FAILED_ERROR',\n  UnknownError = 'UNKNOWN_ERROR',\n  VerificationTokenExpiredError = 'VERIFICATION_TOKEN_EXPIRED_ERROR',\n  VerificationTokenInvalidError = 'VERIFICATION_TOKEN_INVALID_ERROR'\n}\n\nexport type ErrorResult = {\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type Facet = Node & {\n  __typename?: 'Facet';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  translations: Array<FacetTranslation>;\n  updatedAt: Scalars['DateTime'];\n  /** Returns a paginated, sortable, filterable list of the Facet's values. Added in v2.1.0. */\n  valueList: FacetValueList;\n  values: Array<FacetValue>;\n};\n\n\nexport type FacetValueListArgs = {\n  options?: InputMaybe<FacetValueListOptions>;\n};\n\nexport type FacetFilterParameter = {\n  _and?: InputMaybe<Array<FacetFilterParameter>>;\n  _or?: InputMaybe<Array<FacetFilterParameter>>;\n  code?: InputMaybe<StringOperators>;\n  createdAt?: InputMaybe<DateOperators>;\n  id?: InputMaybe<IdOperators>;\n  languageCode?: InputMaybe<StringOperators>;\n  name?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type FacetList = PaginatedList & {\n  __typename?: 'FacetList';\n  items: Array<Facet>;\n  totalItems: Scalars['Int'];\n};\n\nexport type FacetListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<FacetFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<FacetSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\nexport type FacetSortParameter = {\n  code?: InputMaybe<SortOrder>;\n  createdAt?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  name?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport type FacetTranslation = {\n  __typename?: 'FacetTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type FacetValue = Node & {\n  __typename?: 'FacetValue';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  facet: Facet;\n  facetId: Scalars['ID'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  translations: Array<FacetValueTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\n/**\n * Used to construct boolean expressions for filtering search results\n * by FacetValue ID. Examples:\n *\n * * ID=1 OR ID=2: `{ facetValueFilters: [{ or: [1,2] }] }`\n * * ID=1 AND ID=2: `{ facetValueFilters: [{ and: 1 }, { and: 2 }] }`\n * * ID=1 AND (ID=2 OR ID=3): `{ facetValueFilters: [{ and: 1 }, { or: [2,3] }] }`\n */\nexport type FacetValueFilterInput = {\n  and?: InputMaybe<Scalars['ID']>;\n  or?: InputMaybe<Array<Scalars['ID']>>;\n};\n\nexport type FacetValueFilterParameter = {\n  _and?: InputMaybe<Array<FacetValueFilterParameter>>;\n  _or?: InputMaybe<Array<FacetValueFilterParameter>>;\n  code?: InputMaybe<StringOperators>;\n  createdAt?: InputMaybe<DateOperators>;\n  facetId?: InputMaybe<IdOperators>;\n  id?: InputMaybe<IdOperators>;\n  languageCode?: InputMaybe<StringOperators>;\n  name?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type FacetValueList = PaginatedList & {\n  __typename?: 'FacetValueList';\n  items: Array<FacetValue>;\n  totalItems: Scalars['Int'];\n};\n\nexport type FacetValueListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<FacetValueFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<FacetValueSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\n/**\n * Which FacetValues are present in the products returned\n * by the search, and in what quantity.\n */\nexport type FacetValueResult = {\n  __typename?: 'FacetValueResult';\n  count: Scalars['Int'];\n  facetValue: FacetValue;\n};\n\nexport type FacetValueSortParameter = {\n  code?: InputMaybe<SortOrder>;\n  createdAt?: InputMaybe<SortOrder>;\n  facetId?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  name?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport type FacetValueTranslation = {\n  __typename?: 'FacetValueTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type FloatCustomFieldConfig = CustomField & {\n  __typename?: 'FloatCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  max?: Maybe<Scalars['Float']>;\n  min?: Maybe<Scalars['Float']>;\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  step?: Maybe<Scalars['Float']>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type Fulfillment = Node & {\n  __typename?: 'Fulfillment';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  lines: Array<FulfillmentLine>;\n  method: Scalars['String'];\n  state: Scalars['String'];\n  /** @deprecated Use the `lines` field instead */\n  summary: Array<FulfillmentLine>;\n  trackingCode?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type FulfillmentLine = {\n  __typename?: 'FulfillmentLine';\n  fulfillment: Fulfillment;\n  fulfillmentId: Scalars['ID'];\n  orderLine: OrderLine;\n  orderLineId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\nexport enum GlobalFlag {\n  False = 'FALSE',\n  Inherit = 'INHERIT',\n  True = 'TRUE'\n}\n\n/** Returned when attempting to set the Customer on a guest checkout when the configured GuestCheckoutStrategy does not allow it. */\nexport type GuestCheckoutError = ErrorResult & {\n  __typename?: 'GuestCheckoutError';\n  errorCode: ErrorCode;\n  errorDetail: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type HistoryEntry = Node & {\n  __typename?: 'HistoryEntry';\n  createdAt: Scalars['DateTime'];\n  data: Scalars['JSON'];\n  id: Scalars['ID'];\n  type: HistoryEntryType;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type HistoryEntryFilterParameter = {\n  _and?: InputMaybe<Array<HistoryEntryFilterParameter>>;\n  _or?: InputMaybe<Array<HistoryEntryFilterParameter>>;\n  createdAt?: InputMaybe<DateOperators>;\n  id?: InputMaybe<IdOperators>;\n  type?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type HistoryEntryList = PaginatedList & {\n  __typename?: 'HistoryEntryList';\n  items: Array<HistoryEntry>;\n  totalItems: Scalars['Int'];\n};\n\nexport type HistoryEntryListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<HistoryEntryFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<HistoryEntrySortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\nexport type HistoryEntrySortParameter = {\n  createdAt?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport enum HistoryEntryType {\n  CustomerAddedToGroup = 'CUSTOMER_ADDED_TO_GROUP',\n  CustomerAddressCreated = 'CUSTOMER_ADDRESS_CREATED',\n  CustomerAddressDeleted = 'CUSTOMER_ADDRESS_DELETED',\n  CustomerAddressUpdated = 'CUSTOMER_ADDRESS_UPDATED',\n  CustomerDetailUpdated = 'CUSTOMER_DETAIL_UPDATED',\n  CustomerEmailUpdateRequested = 'CUSTOMER_EMAIL_UPDATE_REQUESTED',\n  CustomerEmailUpdateVerified = 'CUSTOMER_EMAIL_UPDATE_VERIFIED',\n  CustomerNote = 'CUSTOMER_NOTE',\n  CustomerPasswordResetRequested = 'CUSTOMER_PASSWORD_RESET_REQUESTED',\n  CustomerPasswordResetVerified = 'CUSTOMER_PASSWORD_RESET_VERIFIED',\n  CustomerPasswordUpdated = 'CUSTOMER_PASSWORD_UPDATED',\n  CustomerRegistered = 'CUSTOMER_REGISTERED',\n  CustomerRemovedFromGroup = 'CUSTOMER_REMOVED_FROM_GROUP',\n  CustomerVerified = 'CUSTOMER_VERIFIED',\n  OrderCancellation = 'ORDER_CANCELLATION',\n  OrderCouponApplied = 'ORDER_COUPON_APPLIED',\n  OrderCouponRemoved = 'ORDER_COUPON_REMOVED',\n  OrderCustomerUpdated = 'ORDER_CUSTOMER_UPDATED',\n  OrderFulfillment = 'ORDER_FULFILLMENT',\n  OrderFulfillmentTransition = 'ORDER_FULFILLMENT_TRANSITION',\n  OrderModified = 'ORDER_MODIFIED',\n  OrderNote = 'ORDER_NOTE',\n  OrderPaymentTransition = 'ORDER_PAYMENT_TRANSITION',\n  OrderRefundTransition = 'ORDER_REFUND_TRANSITION',\n  OrderStateTransition = 'ORDER_STATE_TRANSITION'\n}\n\n/** Operators for filtering on a list of ID fields */\nexport type IdListOperators = {\n  inList: Scalars['ID'];\n};\n\n/** Operators for filtering on an ID field */\nexport type IdOperators = {\n  eq?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<Scalars['String']>>;\n  isNull?: InputMaybe<Scalars['Boolean']>;\n  notEq?: InputMaybe<Scalars['String']>;\n  notIn?: InputMaybe<Array<Scalars['String']>>;\n};\n\n/**\n * Returned if the token used to change a Customer's email address is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type IdentifierChangeTokenExpiredError = ErrorResult & {\n  __typename?: 'IdentifierChangeTokenExpiredError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * Returned if the token used to change a Customer's email address is either\n * invalid or does not match any expected tokens.\n */\nexport type IdentifierChangeTokenInvalidError = ErrorResult & {\n  __typename?: 'IdentifierChangeTokenInvalidError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned when attempting to add a Payment using a PaymentMethod for which the Order is not eligible. */\nexport type IneligiblePaymentMethodError = ErrorResult & {\n  __typename?: 'IneligiblePaymentMethodError';\n  eligibilityCheckerMessage?: Maybe<Scalars['String']>;\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned when attempting to set a ShippingMethod for which the Order is not eligible */\nexport type IneligibleShippingMethodError = ErrorResult & {\n  __typename?: 'IneligibleShippingMethodError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned when attempting to add more items to the Order than are available */\nexport type InsufficientStockError = ErrorResult & {\n  __typename?: 'InsufficientStockError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n  order: Order;\n  quantityAvailable: Scalars['Int'];\n};\n\nexport type IntCustomFieldConfig = CustomField & {\n  __typename?: 'IntCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  max?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  step?: Maybe<Scalars['Int']>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\n/** Returned if the user authentication credentials are not valid */\nexport type InvalidCredentialsError = ErrorResult & {\n  __typename?: 'InvalidCredentialsError';\n  authenticationError: Scalars['String'];\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * @description\n * Languages in the form of a ISO 639-1 language code with optional\n * region or script modifier (e.g. de_AT). The selection available is based\n * on the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\n * and includes the major spoken languages of the world and any widely-used variants.\n *\n * @docsCategory common\n */\nexport enum LanguageCode {\n  /** Afrikaans */\n  Af = 'af',\n  /** Akan */\n  Ak = 'ak',\n  /** Amharic */\n  Am = 'am',\n  /** Arabic */\n  Ar = 'ar',\n  /** Assamese */\n  As = 'as',\n  /** Azerbaijani */\n  Az = 'az',\n  /** Belarusian */\n  Be = 'be',\n  /** Bulgarian */\n  Bg = 'bg',\n  /** Bambara */\n  Bm = 'bm',\n  /** Bangla */\n  Bn = 'bn',\n  /** Tibetan */\n  Bo = 'bo',\n  /** Breton */\n  Br = 'br',\n  /** Bosnian */\n  Bs = 'bs',\n  /** Catalan */\n  Ca = 'ca',\n  /** Chechen */\n  Ce = 'ce',\n  /** Corsican */\n  Co = 'co',\n  /** Czech */\n  Cs = 'cs',\n  /** Church Slavic */\n  Cu = 'cu',\n  /** Welsh */\n  Cy = 'cy',\n  /** Danish */\n  Da = 'da',\n  /** German */\n  De = 'de',\n  /** Austrian German */\n  DeAt = 'de_AT',\n  /** Swiss High German */\n  DeCh = 'de_CH',\n  /** Dzongkha */\n  Dz = 'dz',\n  /** Ewe */\n  Ee = 'ee',\n  /** Greek */\n  El = 'el',\n  /** English */\n  En = 'en',\n  /** Australian English */\n  EnAu = 'en_AU',\n  /** Canadian English */\n  EnCa = 'en_CA',\n  /** British English */\n  EnGb = 'en_GB',\n  /** American English */\n  EnUs = 'en_US',\n  /** Esperanto */\n  Eo = 'eo',\n  /** Spanish */\n  Es = 'es',\n  /** European Spanish */\n  EsEs = 'es_ES',\n  /** Mexican Spanish */\n  EsMx = 'es_MX',\n  /** Estonian */\n  Et = 'et',\n  /** Basque */\n  Eu = 'eu',\n  /** Persian */\n  Fa = 'fa',\n  /** Dari */\n  FaAf = 'fa_AF',\n  /** Fulah */\n  Ff = 'ff',\n  /** Finnish */\n  Fi = 'fi',\n  /** Faroese */\n  Fo = 'fo',\n  /** French */\n  Fr = 'fr',\n  /** Canadian French */\n  FrCa = 'fr_CA',\n  /** Swiss French */\n  FrCh = 'fr_CH',\n  /** Western Frisian */\n  Fy = 'fy',\n  /** Irish */\n  Ga = 'ga',\n  /** Scottish Gaelic */\n  Gd = 'gd',\n  /** Galician */\n  Gl = 'gl',\n  /** Gujarati */\n  Gu = 'gu',\n  /** Manx */\n  Gv = 'gv',\n  /** Hausa */\n  Ha = 'ha',\n  /** Hebrew */\n  He = 'he',\n  /** Hindi */\n  Hi = 'hi',\n  /** Croatian */\n  Hr = 'hr',\n  /** Haitian Creole */\n  Ht = 'ht',\n  /** Hungarian */\n  Hu = 'hu',\n  /** Armenian */\n  Hy = 'hy',\n  /** Interlingua */\n  Ia = 'ia',\n  /** Indonesian */\n  Id = 'id',\n  /** Igbo */\n  Ig = 'ig',\n  /** Sichuan Yi */\n  Ii = 'ii',\n  /** Icelandic */\n  Is = 'is',\n  /** Italian */\n  It = 'it',\n  /** Japanese */\n  Ja = 'ja',\n  /** Javanese */\n  Jv = 'jv',\n  /** Georgian */\n  Ka = 'ka',\n  /** Kikuyu */\n  Ki = 'ki',\n  /** Kazakh */\n  Kk = 'kk',\n  /** Kalaallisut */\n  Kl = 'kl',\n  /** Khmer */\n  Km = 'km',\n  /** Kannada */\n  Kn = 'kn',\n  /** Korean */\n  Ko = 'ko',\n  /** Kashmiri */\n  Ks = 'ks',\n  /** Kurdish */\n  Ku = 'ku',\n  /** Cornish */\n  Kw = 'kw',\n  /** Kyrgyz */\n  Ky = 'ky',\n  /** Latin */\n  La = 'la',\n  /** Luxembourgish */\n  Lb = 'lb',\n  /** Ganda */\n  Lg = 'lg',\n  /** Lingala */\n  Ln = 'ln',\n  /** Lao */\n  Lo = 'lo',\n  /** Lithuanian */\n  Lt = 'lt',\n  /** Luba-Katanga */\n  Lu = 'lu',\n  /** Latvian */\n  Lv = 'lv',\n  /** Malagasy */\n  Mg = 'mg',\n  /** Maori */\n  Mi = 'mi',\n  /** Macedonian */\n  Mk = 'mk',\n  /** Malayalam */\n  Ml = 'ml',\n  /** Mongolian */\n  Mn = 'mn',\n  /** Marathi */\n  Mr = 'mr',\n  /** Malay */\n  Ms = 'ms',\n  /** Maltese */\n  Mt = 'mt',\n  /** Burmese */\n  My = 'my',\n  /** Norwegian Bokm\u00E5l */\n  Nb = 'nb',\n  /** North Ndebele */\n  Nd = 'nd',\n  /** Nepali */\n  Ne = 'ne',\n  /** Dutch */\n  Nl = 'nl',\n  /** Flemish */\n  NlBe = 'nl_BE',\n  /** Norwegian Nynorsk */\n  Nn = 'nn',\n  /** Nyanja */\n  Ny = 'ny',\n  /** Oromo */\n  Om = 'om',\n  /** Odia */\n  Or = 'or',\n  /** Ossetic */\n  Os = 'os',\n  /** Punjabi */\n  Pa = 'pa',\n  /** Polish */\n  Pl = 'pl',\n  /** Pashto */\n  Ps = 'ps',\n  /** Portuguese */\n  Pt = 'pt',\n  /** Brazilian Portuguese */\n  PtBr = 'pt_BR',\n  /** European Portuguese */\n  PtPt = 'pt_PT',\n  /** Quechua */\n  Qu = 'qu',\n  /** Romansh */\n  Rm = 'rm',\n  /** Rundi */\n  Rn = 'rn',\n  /** Romanian */\n  Ro = 'ro',\n  /** Moldavian */\n  RoMd = 'ro_MD',\n  /** Russian */\n  Ru = 'ru',\n  /** Kinyarwanda */\n  Rw = 'rw',\n  /** Sanskrit */\n  Sa = 'sa',\n  /** Sindhi */\n  Sd = 'sd',\n  /** Northern Sami */\n  Se = 'se',\n  /** Sango */\n  Sg = 'sg',\n  /** Sinhala */\n  Si = 'si',\n  /** Slovak */\n  Sk = 'sk',\n  /** Slovenian */\n  Sl = 'sl',\n  /** Samoan */\n  Sm = 'sm',\n  /** Shona */\n  Sn = 'sn',\n  /** Somali */\n  So = 'so',\n  /** Albanian */\n  Sq = 'sq',\n  /** Serbian */\n  Sr = 'sr',\n  /** Southern Sotho */\n  St = 'st',\n  /** Sundanese */\n  Su = 'su',\n  /** Swedish */\n  Sv = 'sv',\n  /** Swahili */\n  Sw = 'sw',\n  /** Congo Swahili */\n  SwCd = 'sw_CD',\n  /** Tamil */\n  Ta = 'ta',\n  /** Telugu */\n  Te = 'te',\n  /** Tajik */\n  Tg = 'tg',\n  /** Thai */\n  Th = 'th',\n  /** Tigrinya */\n  Ti = 'ti',\n  /** Turkmen */\n  Tk = 'tk',\n  /** Tongan */\n  To = 'to',\n  /** Turkish */\n  Tr = 'tr',\n  /** Tatar */\n  Tt = 'tt',\n  /** Uyghur */\n  Ug = 'ug',\n  /** Ukrainian */\n  Uk = 'uk',\n  /** Urdu */\n  Ur = 'ur',\n  /** Uzbek */\n  Uz = 'uz',\n  /** Vietnamese */\n  Vi = 'vi',\n  /** Volap\u00FCk */\n  Vo = 'vo',\n  /** Wolof */\n  Wo = 'wo',\n  /** Xhosa */\n  Xh = 'xh',\n  /** Yiddish */\n  Yi = 'yi',\n  /** Yoruba */\n  Yo = 'yo',\n  /** Chinese */\n  Zh = 'zh',\n  /** Simplified Chinese */\n  ZhHans = 'zh_Hans',\n  /** Traditional Chinese */\n  ZhHant = 'zh_Hant',\n  /** Zulu */\n  Zu = 'zu'\n}\n\nexport type LocaleStringCustomFieldConfig = CustomField & {\n  __typename?: 'LocaleStringCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  length?: Maybe<Scalars['Int']>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  pattern?: Maybe<Scalars['String']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type LocaleTextCustomFieldConfig = CustomField & {\n  __typename?: 'LocaleTextCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type LocalizedString = {\n  __typename?: 'LocalizedString';\n  languageCode: LanguageCode;\n  value: Scalars['String'];\n};\n\nexport enum LogicalOperator {\n  And = 'AND',\n  Or = 'OR'\n}\n\n/** Returned when attempting to register or verify a customer account without a password, when one is required. */\nexport type MissingPasswordError = ErrorResult & {\n  __typename?: 'MissingPasswordError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Adds an item to the order. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available. */\n  addItemToOrder: UpdateOrderItemsResult;\n  /** Add a Payment to the Order */\n  addPaymentToOrder: AddPaymentToOrderResult;\n  /** Adjusts an OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' of type `OrderLineCustomFieldsInput` will be available. */\n  adjustOrderLine: UpdateOrderItemsResult;\n  /** Applies the given coupon code to the active Order */\n  applyCouponCode: ApplyCouponCodeResult;\n  /** Authenticates the user using a named authentication strategy */\n  authenticate: AuthenticationResult;\n  /** Create a new Customer Address */\n  createCustomerAddress: Address;\n  createStripePaymentIntent?: Maybe<Scalars['String']>;\n  /** Delete an existing Address */\n  deleteCustomerAddress: Success;\n  /**\n   * Authenticates the user using the native authentication strategy. This mutation is an alias for authenticate({ native: { ... }})\n   *\n   * The `rememberMe` option applies when using cookie-based sessions, and if `true` it will set the maxAge of the session cookie\n   * to 1 year.\n   */\n  login: NativeAuthenticationResult;\n  /** End the current authenticated session */\n  logout: Success;\n  /** Regenerate and send a verification token for a new Customer registration. Only applicable if `authOptions.requireVerification` is set to true. */\n  refreshCustomerVerification: RefreshCustomerVerificationResult;\n  /**\n   * Register a Customer account with the given credentials. There are three possible registration flows:\n   *\n   * _If `authOptions.requireVerification` is set to `true`:_\n   *\n   * 1. **The Customer is registered _with_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\n   *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _without_ a password. The Customer is then\n   *    verified and authenticated in one step.\n   * 2. **The Customer is registered _without_ a password**. A verificationToken will be created (and typically emailed to the Customer). That\n   *    verificationToken would then be passed to the `verifyCustomerAccount` mutation _with_ the chosen password of the Customer. The Customer is then\n   *    verified and authenticated in one step.\n   *\n   * _If `authOptions.requireVerification` is set to `false`:_\n   *\n   * 3. The Customer _must_ be registered _with_ a password. No further action is needed - the Customer is able to authenticate immediately.\n   */\n  registerCustomerAccount: RegisterCustomerAccountResult;\n  /** Remove all OrderLine from the Order */\n  removeAllOrderLines: RemoveOrderItemsResult;\n  /** Removes the given coupon code from the active Order */\n  removeCouponCode?: Maybe<Order>;\n  /** Remove an OrderLine from the Order */\n  removeOrderLine: RemoveOrderItemsResult;\n  /** Requests a password reset email to be sent */\n  requestPasswordReset?: Maybe<RequestPasswordResetResult>;\n  /**\n   * Request to update the emailAddress of the active Customer. If `authOptions.requireVerification` is enabled\n   * (as is the default), then the `identifierChangeToken` will be assigned to the current User and\n   * a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email\n   * that verification token to the Customer, which is then used to verify the change of email address.\n   */\n  requestUpdateCustomerEmailAddress: RequestUpdateCustomerEmailAddressResult;\n  /** Resets a Customer's password based on the provided token */\n  resetPassword: ResetPasswordResult;\n  /** Set the Customer for the Order. Required only if the Customer is not currently logged in */\n  setCustomerForOrder: SetCustomerForOrderResult;\n  /** Sets the billing address for this order */\n  setOrderBillingAddress: ActiveOrderResult;\n  /** Allows any custom fields to be set for the active order */\n  setOrderCustomFields: ActiveOrderResult;\n  /** Sets the shipping address for this order */\n  setOrderShippingAddress: ActiveOrderResult;\n  /**\n   * Sets the shipping method by id, which can be obtained with the `eligibleShippingMethods` query.\n   * An Order can have multiple shipping methods, in which case you can pass an array of ids. In this case,\n   * you should configure a custom ShippingLineAssignmentStrategy in order to know which OrderLines each\n   * shipping method will apply to.\n   */\n  setOrderShippingMethod: SetOrderShippingMethodResult;\n  /** Transitions an Order to a new state. Valid next states can be found by querying `nextOrderStates` */\n  transitionOrderToState?: Maybe<TransitionOrderToStateResult>;\n  /** Update an existing Customer */\n  updateCustomer: Customer;\n  /** Update an existing Address */\n  updateCustomerAddress: Address;\n  /**\n   * Confirm the update of the emailAddress with the provided token, which has been generated by the\n   * `requestUpdateCustomerEmailAddress` mutation.\n   */\n  updateCustomerEmailAddress: UpdateCustomerEmailAddressResult;\n  /** Update the password of the active Customer */\n  updateCustomerPassword: UpdateCustomerPasswordResult;\n  /**\n   * Verify a Customer email address with the token sent to that address. Only applicable if `authOptions.requireVerification` is set to true.\n   *\n   * If the Customer was not registered with a password in the `registerCustomerAccount` mutation, the password _must_ be\n   * provided here.\n   */\n  verifyCustomerAccount: VerifyCustomerAccountResult;\n};\n\n\nexport type MutationAddItemToOrderArgs = {\n  productVariantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type MutationAddPaymentToOrderArgs = {\n  input: PaymentInput;\n};\n\n\nexport type MutationAdjustOrderLineArgs = {\n  orderLineId: Scalars['ID'];\n  quantity: Scalars['Int'];\n};\n\n\nexport type MutationApplyCouponCodeArgs = {\n  couponCode: Scalars['String'];\n};\n\n\nexport type MutationAuthenticateArgs = {\n  input: AuthenticationInput;\n  rememberMe?: InputMaybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationCreateCustomerAddressArgs = {\n  input: CreateAddressInput;\n};\n\n\nexport type MutationDeleteCustomerAddressArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  rememberMe?: InputMaybe<Scalars['Boolean']>;\n  username: Scalars['String'];\n};\n\n\nexport type MutationRefreshCustomerVerificationArgs = {\n  emailAddress: Scalars['String'];\n};\n\n\nexport type MutationRegisterCustomerAccountArgs = {\n  input: RegisterCustomerInput;\n};\n\n\nexport type MutationRemoveCouponCodeArgs = {\n  couponCode: Scalars['String'];\n};\n\n\nexport type MutationRemoveOrderLineArgs = {\n  orderLineId: Scalars['ID'];\n};\n\n\nexport type MutationRequestPasswordResetArgs = {\n  emailAddress: Scalars['String'];\n};\n\n\nexport type MutationRequestUpdateCustomerEmailAddressArgs = {\n  newEmailAddress: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationSetCustomerForOrderArgs = {\n  input: CreateCustomerInput;\n};\n\n\nexport type MutationSetOrderBillingAddressArgs = {\n  input: CreateAddressInput;\n};\n\n\nexport type MutationSetOrderCustomFieldsArgs = {\n  input: UpdateOrderInput;\n};\n\n\nexport type MutationSetOrderShippingAddressArgs = {\n  input: CreateAddressInput;\n};\n\n\nexport type MutationSetOrderShippingMethodArgs = {\n  shippingMethodId: Array<Scalars['ID']>;\n};\n\n\nexport type MutationTransitionOrderToStateArgs = {\n  state: Scalars['String'];\n};\n\n\nexport type MutationUpdateCustomerArgs = {\n  input: UpdateCustomerInput;\n};\n\n\nexport type MutationUpdateCustomerAddressArgs = {\n  input: UpdateAddressInput;\n};\n\n\nexport type MutationUpdateCustomerEmailAddressArgs = {\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateCustomerPasswordArgs = {\n  currentPassword: Scalars['String'];\n  newPassword: Scalars['String'];\n};\n\n\nexport type MutationVerifyCustomerAccountArgs = {\n  password?: InputMaybe<Scalars['String']>;\n  token: Scalars['String'];\n};\n\nexport type NativeAuthInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n/** Returned when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured. */\nexport type NativeAuthStrategyError = ErrorResult & {\n  __typename?: 'NativeAuthStrategyError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type NativeAuthenticationResult = CurrentUser | InvalidCredentialsError | NativeAuthStrategyError | NotVerifiedError;\n\n/** Returned when attempting to set a negative OrderLine quantity. */\nexport type NegativeQuantityError = ErrorResult & {\n  __typename?: 'NegativeQuantityError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * Returned when invoking a mutation which depends on there being an active Order on the\n * current session.\n */\nexport type NoActiveOrderError = ErrorResult & {\n  __typename?: 'NoActiveOrderError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type Node = {\n  id: Scalars['ID'];\n};\n\n/**\n * Returned if `authOptions.requireVerification` is set to `true` (which is the default)\n * and an unverified user attempts to authenticate.\n */\nexport type NotVerifiedError = ErrorResult & {\n  __typename?: 'NotVerifiedError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Operators for filtering on a list of Number fields */\nexport type NumberListOperators = {\n  inList: Scalars['Float'];\n};\n\n/** Operators for filtering on a Int or Float field */\nexport type NumberOperators = {\n  between?: InputMaybe<NumberRange>;\n  eq?: InputMaybe<Scalars['Float']>;\n  gt?: InputMaybe<Scalars['Float']>;\n  gte?: InputMaybe<Scalars['Float']>;\n  isNull?: InputMaybe<Scalars['Boolean']>;\n  lt?: InputMaybe<Scalars['Float']>;\n  lte?: InputMaybe<Scalars['Float']>;\n};\n\nexport type NumberRange = {\n  end: Scalars['Float'];\n  start: Scalars['Float'];\n};\n\nexport type Order = Node & {\n  __typename?: 'Order';\n  /** An order is active as long as the payment process has not been completed */\n  active: Scalars['Boolean'];\n  billingAddress?: Maybe<OrderAddress>;\n  /** A unique code for the Order */\n  code: Scalars['String'];\n  /** An array of all coupon codes applied to the Order */\n  couponCodes: Array<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  currencyCode: CurrencyCode;\n  customFields?: Maybe<Scalars['JSON']>;\n  customer?: Maybe<Customer>;\n  discounts: Array<Discount>;\n  fulfillments?: Maybe<Array<Fulfillment>>;\n  history: HistoryEntryList;\n  id: Scalars['ID'];\n  lines: Array<OrderLine>;\n  /**\n   * The date & time that the Order was placed, i.e. the Customer\n   * completed the checkout and the Order is no longer \"active\"\n   */\n  orderPlacedAt?: Maybe<Scalars['DateTime']>;\n  payments?: Maybe<Array<Payment>>;\n  /** Promotions applied to the order. Only gets populated after the payment process has completed. */\n  promotions: Array<Promotion>;\n  shipping: Scalars['Money'];\n  shippingAddress?: Maybe<OrderAddress>;\n  shippingLines: Array<ShippingLine>;\n  shippingWithTax: Scalars['Money'];\n  state: Scalars['String'];\n  /**\n   * The subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\n   * discounts which have been prorated (proportionally distributed) amongst the items of each OrderLine.\n   * To get a total of all OrderLines which does not account for prorated discounts, use the\n   * sum of `OrderLine.discountedLinePrice` values.\n   */\n  subTotal: Scalars['Money'];\n  /** Same as subTotal, but inclusive of tax */\n  subTotalWithTax: Scalars['Money'];\n  /**\n   * Surcharges are arbitrary modifications to the Order total which are neither\n   * ProductVariants nor discounts resulting from applied Promotions. For example,\n   * one-off discounts based on customer interaction, or surcharges based on payment\n   * methods.\n   */\n  surcharges: Array<Surcharge>;\n  /** A summary of the taxes being applied to this Order */\n  taxSummary: Array<OrderTaxSummary>;\n  /** Equal to subTotal plus shipping */\n  total: Scalars['Money'];\n  totalQuantity: Scalars['Int'];\n  /** The final payable amount. Equal to subTotalWithTax plus shippingWithTax */\n  totalWithTax: Scalars['Money'];\n  type: OrderType;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type OrderHistoryArgs = {\n  options?: InputMaybe<HistoryEntryListOptions>;\n};\n\nexport type OrderAddress = {\n  __typename?: 'OrderAddress';\n  city?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  countryCode?: Maybe<Scalars['String']>;\n  customFields?: Maybe<Scalars['JSON']>;\n  fullName?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  postalCode?: Maybe<Scalars['String']>;\n  province?: Maybe<Scalars['String']>;\n  streetLine1?: Maybe<Scalars['String']>;\n  streetLine2?: Maybe<Scalars['String']>;\n};\n\nexport type OrderFilterParameter = {\n  _and?: InputMaybe<Array<OrderFilterParameter>>;\n  _or?: InputMaybe<Array<OrderFilterParameter>>;\n  active?: InputMaybe<BooleanOperators>;\n  code?: InputMaybe<StringOperators>;\n  createdAt?: InputMaybe<DateOperators>;\n  currencyCode?: InputMaybe<StringOperators>;\n  id?: InputMaybe<IdOperators>;\n  orderPlacedAt?: InputMaybe<DateOperators>;\n  shipping?: InputMaybe<NumberOperators>;\n  shippingWithTax?: InputMaybe<NumberOperators>;\n  state?: InputMaybe<StringOperators>;\n  subTotal?: InputMaybe<NumberOperators>;\n  subTotalWithTax?: InputMaybe<NumberOperators>;\n  total?: InputMaybe<NumberOperators>;\n  totalQuantity?: InputMaybe<NumberOperators>;\n  totalWithTax?: InputMaybe<NumberOperators>;\n  type?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\n/** Returned when the maximum order size limit has been reached. */\nexport type OrderLimitError = ErrorResult & {\n  __typename?: 'OrderLimitError';\n  errorCode: ErrorCode;\n  maxItems: Scalars['Int'];\n  message: Scalars['String'];\n};\n\nexport type OrderLine = Node & {\n  __typename?: 'OrderLine';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  /** The price of the line including discounts, excluding tax */\n  discountedLinePrice: Scalars['Money'];\n  /** The price of the line including discounts and tax */\n  discountedLinePriceWithTax: Scalars['Money'];\n  /**\n   * The price of a single unit including discounts, excluding tax.\n   *\n   * If Order-level discounts have been applied, this will not be the\n   * actual taxable unit price (see `proratedUnitPrice`), but is generally the\n   * correct price to display to customers to avoid confusion\n   * about the internal handling of distributed Order-level discounts.\n   */\n  discountedUnitPrice: Scalars['Money'];\n  /** The price of a single unit including discounts and tax */\n  discountedUnitPriceWithTax: Scalars['Money'];\n  discounts: Array<Discount>;\n  featuredAsset?: Maybe<Asset>;\n  fulfillmentLines?: Maybe<Array<FulfillmentLine>>;\n  id: Scalars['ID'];\n  /** The total price of the line excluding tax and discounts. */\n  linePrice: Scalars['Money'];\n  /** The total price of the line including tax but excluding discounts. */\n  linePriceWithTax: Scalars['Money'];\n  /** The total tax on this line */\n  lineTax: Scalars['Money'];\n  order: Order;\n  /** The quantity at the time the Order was placed */\n  orderPlacedQuantity: Scalars['Int'];\n  productVariant: ProductVariant;\n  /**\n   * The actual line price, taking into account both item discounts _and_ prorated (proportionally-distributed)\n   * Order-level discounts. This value is the true economic value of the OrderLine, and is used in tax\n   * and refund calculations.\n   */\n  proratedLinePrice: Scalars['Money'];\n  /** The proratedLinePrice including tax */\n  proratedLinePriceWithTax: Scalars['Money'];\n  /**\n   * The actual unit price, taking into account both item discounts _and_ prorated (proportionally-distributed)\n   * Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\n   * and refund calculations.\n   */\n  proratedUnitPrice: Scalars['Money'];\n  /** The proratedUnitPrice including tax */\n  proratedUnitPriceWithTax: Scalars['Money'];\n  /** The quantity of items purchased */\n  quantity: Scalars['Int'];\n  taxLines: Array<TaxLine>;\n  taxRate: Scalars['Float'];\n  /** The price of a single unit, excluding tax and discounts */\n  unitPrice: Scalars['Money'];\n  /** Non-zero if the unitPrice has changed since it was initially added to Order */\n  unitPriceChangeSinceAdded: Scalars['Money'];\n  /** The price of a single unit, including tax but excluding discounts */\n  unitPriceWithTax: Scalars['Money'];\n  /** Non-zero if the unitPriceWithTax has changed since it was initially added to Order */\n  unitPriceWithTaxChangeSinceAdded: Scalars['Money'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type OrderList = PaginatedList & {\n  __typename?: 'OrderList';\n  items: Array<Order>;\n  totalItems: Scalars['Int'];\n};\n\nexport type OrderListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<OrderFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<OrderSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\n/** Returned when attempting to modify the contents of an Order that is not in the `AddingItems` state. */\nexport type OrderModificationError = ErrorResult & {\n  __typename?: 'OrderModificationError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned when attempting to add a Payment to an Order that is not in the `ArrangingPayment` state. */\nexport type OrderPaymentStateError = ErrorResult & {\n  __typename?: 'OrderPaymentStateError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type OrderSortParameter = {\n  code?: InputMaybe<SortOrder>;\n  createdAt?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  orderPlacedAt?: InputMaybe<SortOrder>;\n  shipping?: InputMaybe<SortOrder>;\n  shippingWithTax?: InputMaybe<SortOrder>;\n  state?: InputMaybe<SortOrder>;\n  subTotal?: InputMaybe<SortOrder>;\n  subTotalWithTax?: InputMaybe<SortOrder>;\n  total?: InputMaybe<SortOrder>;\n  totalQuantity?: InputMaybe<SortOrder>;\n  totalWithTax?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\n/** Returned if there is an error in transitioning the Order state */\nexport type OrderStateTransitionError = ErrorResult & {\n  __typename?: 'OrderStateTransitionError';\n  errorCode: ErrorCode;\n  fromState: Scalars['String'];\n  message: Scalars['String'];\n  toState: Scalars['String'];\n  transitionError: Scalars['String'];\n};\n\n/**\n * A summary of the taxes being applied to this order, grouped\n * by taxRate.\n */\nexport type OrderTaxSummary = {\n  __typename?: 'OrderTaxSummary';\n  /** A description of this tax */\n  description: Scalars['String'];\n  /** The total net price of OrderLines to which this taxRate applies */\n  taxBase: Scalars['Money'];\n  /** The taxRate as a percentage */\n  taxRate: Scalars['Float'];\n  /** The total tax being applied to the Order at this taxRate */\n  taxTotal: Scalars['Money'];\n};\n\nexport enum OrderType {\n  Aggregate = 'Aggregate',\n  Regular = 'Regular',\n  Seller = 'Seller'\n}\n\nexport type PaginatedList = {\n  items: Array<Node>;\n  totalItems: Scalars['Int'];\n};\n\n/** Returned when attempting to verify a customer account with a password, when a password has already been set. */\nexport type PasswordAlreadySetError = ErrorResult & {\n  __typename?: 'PasswordAlreadySetError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * Returned if the token used to reset a Customer's password is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type PasswordResetTokenExpiredError = ErrorResult & {\n  __typename?: 'PasswordResetTokenExpiredError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * Returned if the token used to reset a Customer's password is either\n * invalid or does not match any expected tokens.\n */\nexport type PasswordResetTokenInvalidError = ErrorResult & {\n  __typename?: 'PasswordResetTokenInvalidError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/** Returned when attempting to register or verify a customer account where the given password fails password validation. */\nexport type PasswordValidationError = ErrorResult & {\n  __typename?: 'PasswordValidationError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n  validationErrorMessage: Scalars['String'];\n};\n\nexport type Payment = Node & {\n  __typename?: 'Payment';\n  amount: Scalars['Money'];\n  createdAt: Scalars['DateTime'];\n  errorMessage?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  metadata?: Maybe<Scalars['JSON']>;\n  method: Scalars['String'];\n  refunds: Array<Refund>;\n  state: Scalars['String'];\n  transactionId?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['DateTime'];\n};\n\n/** Returned when a Payment is declined by the payment provider. */\nexport type PaymentDeclinedError = ErrorResult & {\n  __typename?: 'PaymentDeclinedError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n  paymentErrorMessage: Scalars['String'];\n};\n\n/** Returned when a Payment fails due to an error. */\nexport type PaymentFailedError = ErrorResult & {\n  __typename?: 'PaymentFailedError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n  paymentErrorMessage: Scalars['String'];\n};\n\n/** Passed as input to the `addPaymentToOrder` mutation. */\nexport type PaymentInput = {\n  /**\n   * This field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method\n   * as the \"metadata\" argument. For example, it could contain an ID for the payment and other\n   * data generated by the payment provider.\n   */\n  metadata: Scalars['JSON'];\n  /** This field should correspond to the `code` property of a PaymentMethod. */\n  method: Scalars['String'];\n};\n\nexport type PaymentMethod = Node & {\n  __typename?: 'PaymentMethod';\n  checker?: Maybe<ConfigurableOperation>;\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  handler: ConfigurableOperation;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  translations: Array<PaymentMethodTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type PaymentMethodQuote = {\n  __typename?: 'PaymentMethodQuote';\n  code: Scalars['String'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  eligibilityMessage?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  isEligible: Scalars['Boolean'];\n  name: Scalars['String'];\n};\n\nexport type PaymentMethodTranslation = {\n  __typename?: 'PaymentMethodTranslation';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\n/**\n * @description\n * Permissions for administrators and customers. Used to control access to\n * GraphQL resolvers via the {@link Allow} decorator.\n *\n * ## Understanding Permission.Owner\n *\n * `Permission.Owner` is a special permission which is used in some Vendure resolvers to indicate that that resolver should only\n * be accessible to the \"owner\" of that resource.\n *\n * For example, the Shop API `activeCustomer` query resolver should only return the Customer object for the \"owner\" of that Customer, i.e.\n * based on the activeUserId of the current session. As a result, the resolver code looks like this:\n *\n * @example\n * ```TypeScript\n * \\@Query()\n * \\@Allow(Permission.Owner)\n * async activeCustomer(\\@Ctx() ctx: RequestContext): Promise<Customer | undefined> {\n *   const userId = ctx.activeUserId;\n *   if (userId) {\n *     return this.customerService.findOneByUserId(ctx, userId);\n *   }\n * }\n * ```\n *\n * Here we can see that the \"ownership\" must be enforced by custom logic inside the resolver. Since \"ownership\" cannot be defined generally\n * nor statically encoded at build-time, any resolvers using `Permission.Owner` **must** include logic to enforce that only the owner\n * of the resource has access. If not, then it is the equivalent of using `Permission.Public`.\n *\n *\n * @docsCategory common\n */\nexport enum Permission {\n  /** Authenticated means simply that the user is logged in */\n  Authenticated = 'Authenticated',\n  /** Grants permission to create Administrator */\n  CreateAdministrator = 'CreateAdministrator',\n  /** Grants permission to create Asset */\n  CreateAsset = 'CreateAsset',\n  /** Grants permission to create Products, Facets, Assets, Collections */\n  CreateCatalog = 'CreateCatalog',\n  /** Grants permission to create Channel */\n  CreateChannel = 'CreateChannel',\n  /** Grants permission to create Collection */\n  CreateCollection = 'CreateCollection',\n  /** Grants permission to create Country */\n  CreateCountry = 'CreateCountry',\n  /** Grants permission to create Customer */\n  CreateCustomer = 'CreateCustomer',\n  /** Grants permission to create CustomerGroup */\n  CreateCustomerGroup = 'CreateCustomerGroup',\n  /** Grants permission to create Facet */\n  CreateFacet = 'CreateFacet',\n  /** Grants permission to create Order */\n  CreateOrder = 'CreateOrder',\n  /** Grants permission to create PaymentMethod */\n  CreatePaymentMethod = 'CreatePaymentMethod',\n  /** Grants permission to create Product */\n  CreateProduct = 'CreateProduct',\n  /** Grants permission to create Promotion */\n  CreatePromotion = 'CreatePromotion',\n  /** Grants permission to create Seller */\n  CreateSeller = 'CreateSeller',\n  /** Grants permission to create PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n  CreateSettings = 'CreateSettings',\n  /** Grants permission to create ShippingMethod */\n  CreateShippingMethod = 'CreateShippingMethod',\n  /** Grants permission to create StockLocation */\n  CreateStockLocation = 'CreateStockLocation',\n  /** Grants permission to create System */\n  CreateSystem = 'CreateSystem',\n  /** Grants permission to create Tag */\n  CreateTag = 'CreateTag',\n  /** Grants permission to create TaxCategory */\n  CreateTaxCategory = 'CreateTaxCategory',\n  /** Grants permission to create TaxRate */\n  CreateTaxRate = 'CreateTaxRate',\n  /** Grants permission to create Zone */\n  CreateZone = 'CreateZone',\n  /** Grants permission to delete Administrator */\n  DeleteAdministrator = 'DeleteAdministrator',\n  /** Grants permission to delete Asset */\n  DeleteAsset = 'DeleteAsset',\n  /** Grants permission to delete Products, Facets, Assets, Collections */\n  DeleteCatalog = 'DeleteCatalog',\n  /** Grants permission to delete Channel */\n  DeleteChannel = 'DeleteChannel',\n  /** Grants permission to delete Collection */\n  DeleteCollection = 'DeleteCollection',\n  /** Grants permission to delete Country */\n  DeleteCountry = 'DeleteCountry',\n  /** Grants permission to delete Customer */\n  DeleteCustomer = 'DeleteCustomer',\n  /** Grants permission to delete CustomerGroup */\n  DeleteCustomerGroup = 'DeleteCustomerGroup',\n  /** Grants permission to delete Facet */\n  DeleteFacet = 'DeleteFacet',\n  /** Grants permission to delete Order */\n  DeleteOrder = 'DeleteOrder',\n  /** Grants permission to delete PaymentMethod */\n  DeletePaymentMethod = 'DeletePaymentMethod',\n  /** Grants permission to delete Product */\n  DeleteProduct = 'DeleteProduct',\n  /** Grants permission to delete Promotion */\n  DeletePromotion = 'DeletePromotion',\n  /** Grants permission to delete Seller */\n  DeleteSeller = 'DeleteSeller',\n  /** Grants permission to delete PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n  DeleteSettings = 'DeleteSettings',\n  /** Grants permission to delete ShippingMethod */\n  DeleteShippingMethod = 'DeleteShippingMethod',\n  /** Grants permission to delete StockLocation */\n  DeleteStockLocation = 'DeleteStockLocation',\n  /** Grants permission to delete System */\n  DeleteSystem = 'DeleteSystem',\n  /** Grants permission to delete Tag */\n  DeleteTag = 'DeleteTag',\n  /** Grants permission to delete TaxCategory */\n  DeleteTaxCategory = 'DeleteTaxCategory',\n  /** Grants permission to delete TaxRate */\n  DeleteTaxRate = 'DeleteTaxRate',\n  /** Grants permission to delete Zone */\n  DeleteZone = 'DeleteZone',\n  /** Owner means the user owns this entity, e.g. a Customer's own Order */\n  Owner = 'Owner',\n  /** Public means any unauthenticated user may perform the operation */\n  Public = 'Public',\n  /** Grants permission to read Administrator */\n  ReadAdministrator = 'ReadAdministrator',\n  /** Grants permission to read Asset */\n  ReadAsset = 'ReadAsset',\n  /** Grants permission to read Products, Facets, Assets, Collections */\n  ReadCatalog = 'ReadCatalog',\n  /** Grants permission to read Channel */\n  ReadChannel = 'ReadChannel',\n  /** Grants permission to read Collection */\n  ReadCollection = 'ReadCollection',\n  /** Grants permission to read Country */\n  ReadCountry = 'ReadCountry',\n  /** Grants permission to read Customer */\n  ReadCustomer = 'ReadCustomer',\n  /** Grants permission to read CustomerGroup */\n  ReadCustomerGroup = 'ReadCustomerGroup',\n  /** Grants permission to read Facet */\n  ReadFacet = 'ReadFacet',\n  /** Grants permission to read Order */\n  ReadOrder = 'ReadOrder',\n  /** Grants permission to read PaymentMethod */\n  ReadPaymentMethod = 'ReadPaymentMethod',\n  /** Grants permission to read Product */\n  ReadProduct = 'ReadProduct',\n  /** Grants permission to read Promotion */\n  ReadPromotion = 'ReadPromotion',\n  /** Grants permission to read Seller */\n  ReadSeller = 'ReadSeller',\n  /** Grants permission to read PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n  ReadSettings = 'ReadSettings',\n  /** Grants permission to read ShippingMethod */\n  ReadShippingMethod = 'ReadShippingMethod',\n  /** Grants permission to read StockLocation */\n  ReadStockLocation = 'ReadStockLocation',\n  /** Grants permission to read System */\n  ReadSystem = 'ReadSystem',\n  /** Grants permission to read Tag */\n  ReadTag = 'ReadTag',\n  /** Grants permission to read TaxCategory */\n  ReadTaxCategory = 'ReadTaxCategory',\n  /** Grants permission to read TaxRate */\n  ReadTaxRate = 'ReadTaxRate',\n  /** Grants permission to read Zone */\n  ReadZone = 'ReadZone',\n  /** SuperAdmin has unrestricted access to all operations */\n  SuperAdmin = 'SuperAdmin',\n  /** Grants permission to update Administrator */\n  UpdateAdministrator = 'UpdateAdministrator',\n  /** Grants permission to update Asset */\n  UpdateAsset = 'UpdateAsset',\n  /** Grants permission to update Products, Facets, Assets, Collections */\n  UpdateCatalog = 'UpdateCatalog',\n  /** Grants permission to update Channel */\n  UpdateChannel = 'UpdateChannel',\n  /** Grants permission to update Collection */\n  UpdateCollection = 'UpdateCollection',\n  /** Grants permission to update Country */\n  UpdateCountry = 'UpdateCountry',\n  /** Grants permission to update Customer */\n  UpdateCustomer = 'UpdateCustomer',\n  /** Grants permission to update CustomerGroup */\n  UpdateCustomerGroup = 'UpdateCustomerGroup',\n  /** Grants permission to update Facet */\n  UpdateFacet = 'UpdateFacet',\n  /** Grants permission to update GlobalSettings */\n  UpdateGlobalSettings = 'UpdateGlobalSettings',\n  /** Grants permission to update Order */\n  UpdateOrder = 'UpdateOrder',\n  /** Grants permission to update PaymentMethod */\n  UpdatePaymentMethod = 'UpdatePaymentMethod',\n  /** Grants permission to update Product */\n  UpdateProduct = 'UpdateProduct',\n  /** Grants permission to update Promotion */\n  UpdatePromotion = 'UpdatePromotion',\n  /** Grants permission to update Seller */\n  UpdateSeller = 'UpdateSeller',\n  /** Grants permission to update PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings */\n  UpdateSettings = 'UpdateSettings',\n  /** Grants permission to update ShippingMethod */\n  UpdateShippingMethod = 'UpdateShippingMethod',\n  /** Grants permission to update StockLocation */\n  UpdateStockLocation = 'UpdateStockLocation',\n  /** Grants permission to update System */\n  UpdateSystem = 'UpdateSystem',\n  /** Grants permission to update Tag */\n  UpdateTag = 'UpdateTag',\n  /** Grants permission to update TaxCategory */\n  UpdateTaxCategory = 'UpdateTaxCategory',\n  /** Grants permission to update TaxRate */\n  UpdateTaxRate = 'UpdateTaxRate',\n  /** Grants permission to update Zone */\n  UpdateZone = 'UpdateZone'\n}\n\n/** The price range where the result has more than one price */\nexport type PriceRange = {\n  __typename?: 'PriceRange';\n  max: Scalars['Money'];\n  min: Scalars['Money'];\n};\n\nexport type Product = Node & {\n  __typename?: 'Product';\n  assets: Array<Asset>;\n  collections: Array<Collection>;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  facetValues: Array<FacetValue>;\n  featuredAsset?: Maybe<Asset>;\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  optionGroups: Array<ProductOptionGroup>;\n  slug: Scalars['String'];\n  translations: Array<ProductTranslation>;\n  updatedAt: Scalars['DateTime'];\n  /** Returns a paginated, sortable, filterable list of ProductVariants */\n  variantList: ProductVariantList;\n  /** Returns all ProductVariants */\n  variants: Array<ProductVariant>;\n};\n\n\nexport type ProductVariantListArgs = {\n  options?: InputMaybe<ProductVariantListOptions>;\n};\n\nexport type ProductFilterParameter = {\n  _and?: InputMaybe<Array<ProductFilterParameter>>;\n  _or?: InputMaybe<Array<ProductFilterParameter>>;\n  createdAt?: InputMaybe<DateOperators>;\n  description?: InputMaybe<StringOperators>;\n  enabled?: InputMaybe<BooleanOperators>;\n  id?: InputMaybe<IdOperators>;\n  languageCode?: InputMaybe<StringOperators>;\n  name?: InputMaybe<StringOperators>;\n  slug?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type ProductList = PaginatedList & {\n  __typename?: 'ProductList';\n  items: Array<Product>;\n  totalItems: Scalars['Int'];\n};\n\nexport type ProductListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<ProductFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<ProductSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\nexport type ProductOption = Node & {\n  __typename?: 'ProductOption';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  group: ProductOptionGroup;\n  groupId: Scalars['ID'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  translations: Array<ProductOptionTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductOptionGroup = Node & {\n  __typename?: 'ProductOptionGroup';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  options: Array<ProductOption>;\n  translations: Array<ProductOptionGroupTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductOptionGroupTranslation = {\n  __typename?: 'ProductOptionGroupTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductOptionTranslation = {\n  __typename?: 'ProductOptionTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductSortParameter = {\n  createdAt?: InputMaybe<SortOrder>;\n  description?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  name?: InputMaybe<SortOrder>;\n  slug?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport type ProductTranslation = {\n  __typename?: 'ProductTranslation';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductVariant = Node & {\n  __typename?: 'ProductVariant';\n  assets: Array<Asset>;\n  createdAt: Scalars['DateTime'];\n  currencyCode: CurrencyCode;\n  customFields?: Maybe<Scalars['JSON']>;\n  facetValues: Array<FacetValue>;\n  featuredAsset?: Maybe<Asset>;\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  options: Array<ProductOption>;\n  price: Scalars['Money'];\n  priceWithTax: Scalars['Money'];\n  product: Product;\n  productId: Scalars['ID'];\n  sku: Scalars['String'];\n  stockLevel: Scalars['String'];\n  taxCategory: TaxCategory;\n  taxRateApplied: TaxRate;\n  translations: Array<ProductVariantTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProductVariantFilterParameter = {\n  _and?: InputMaybe<Array<ProductVariantFilterParameter>>;\n  _or?: InputMaybe<Array<ProductVariantFilterParameter>>;\n  createdAt?: InputMaybe<DateOperators>;\n  currencyCode?: InputMaybe<StringOperators>;\n  id?: InputMaybe<IdOperators>;\n  languageCode?: InputMaybe<StringOperators>;\n  name?: InputMaybe<StringOperators>;\n  price?: InputMaybe<NumberOperators>;\n  priceWithTax?: InputMaybe<NumberOperators>;\n  productId?: InputMaybe<IdOperators>;\n  sku?: InputMaybe<StringOperators>;\n  stockLevel?: InputMaybe<StringOperators>;\n  updatedAt?: InputMaybe<DateOperators>;\n};\n\nexport type ProductVariantList = PaginatedList & {\n  __typename?: 'ProductVariantList';\n  items: Array<ProductVariant>;\n  totalItems: Scalars['Int'];\n};\n\nexport type ProductVariantListOptions = {\n  /** Allows the results to be filtered */\n  filter?: InputMaybe<ProductVariantFilterParameter>;\n  /** Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND. */\n  filterOperator?: InputMaybe<LogicalOperator>;\n  /** Skips the first n results, for use in pagination */\n  skip?: InputMaybe<Scalars['Int']>;\n  /** Specifies which properties to sort the results by */\n  sort?: InputMaybe<ProductVariantSortParameter>;\n  /** Takes n results, for use in pagination */\n  take?: InputMaybe<Scalars['Int']>;\n};\n\nexport type ProductVariantSortParameter = {\n  createdAt?: InputMaybe<SortOrder>;\n  id?: InputMaybe<SortOrder>;\n  name?: InputMaybe<SortOrder>;\n  price?: InputMaybe<SortOrder>;\n  priceWithTax?: InputMaybe<SortOrder>;\n  productId?: InputMaybe<SortOrder>;\n  sku?: InputMaybe<SortOrder>;\n  stockLevel?: InputMaybe<SortOrder>;\n  updatedAt?: InputMaybe<SortOrder>;\n};\n\nexport type ProductVariantTranslation = {\n  __typename?: 'ProductVariantTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Promotion = Node & {\n  __typename?: 'Promotion';\n  actions: Array<ConfigurableOperation>;\n  conditions: Array<ConfigurableOperation>;\n  couponCode?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  endsAt?: Maybe<Scalars['DateTime']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  perCustomerUsageLimit?: Maybe<Scalars['Int']>;\n  startsAt?: Maybe<Scalars['DateTime']>;\n  translations: Array<PromotionTranslation>;\n  updatedAt: Scalars['DateTime'];\n  usageLimit?: Maybe<Scalars['Int']>;\n};\n\nexport type PromotionList = PaginatedList & {\n  __typename?: 'PromotionList';\n  items: Array<Promotion>;\n  totalItems: Scalars['Int'];\n};\n\nexport type PromotionTranslation = {\n  __typename?: 'PromotionTranslation';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Province = Node & Region & {\n  __typename?: 'Province';\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  parent?: Maybe<Region>;\n  parentId?: Maybe<Scalars['ID']>;\n  translations: Array<RegionTranslation>;\n  type: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ProvinceList = PaginatedList & {\n  __typename?: 'ProvinceList';\n  items: Array<Province>;\n  totalItems: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** The active Channel */\n  activeChannel: Channel;\n  /** The active Customer */\n  activeCustomer?: Maybe<Customer>;\n  /**\n   * The active Order. Will be `null` until an Order is created via `addItemToOrder`. Once an Order reaches the\n   * state of `PaymentAuthorized` or `PaymentSettled`, then that Order is no longer considered \"active\" and this\n   * query will once again return `null`.\n   */\n  activeOrder?: Maybe<Order>;\n  /** An array of supported Countries */\n  availableCountries: Array<Country>;\n  /** Returns a Collection either by its id or slug. If neither 'id' nor 'slug' is specified, an error will result. */\n  collection?: Maybe<Collection>;\n  /** A list of Collections available to the shop */\n  collections: CollectionList;\n  /** Returns a list of payment methods and their eligibility based on the current active Order */\n  eligiblePaymentMethods: Array<PaymentMethodQuote>;\n  /** Returns a list of eligible shipping methods based on the current active Order */\n  eligibleShippingMethods: Array<ShippingMethodQuote>;\n  /** Returns a Facet by its id */\n  facet?: Maybe<Facet>;\n  /** A list of Facets available to the shop */\n  facets: FacetList;\n  generateBraintreeClientToken?: Maybe<Scalars['String']>;\n  /** Returns information about the current authenticated User */\n  me?: Maybe<CurrentUser>;\n  /** Returns the possible next states that the activeOrder can transition to */\n  nextOrderStates: Array<Scalars['String']>;\n  /**\n   * Returns an Order based on the id. Note that in the Shop API, only orders belonging to the\n   * currently-authenticated User may be queried.\n   */\n  order?: Maybe<Order>;\n  /**\n   * Returns an Order based on the order `code`. For guest Orders (i.e. Orders placed by non-authenticated Customers)\n   * this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation\n   * screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing\n   * general anonymous access to Order data.\n   */\n  orderByCode?: Maybe<Order>;\n  /** Get a Product either by id or slug. If neither 'id' nor 'slug' is specified, an error will result. */\n  product?: Maybe<Product>;\n  /** Get a list of Products */\n  products: ProductList;\n  /** Search Products based on the criteria set by the `SearchInput` */\n  search: SearchResponse;\n};\n\n\nexport type QueryCollectionArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  slug?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type QueryCollectionsArgs = {\n  options?: InputMaybe<CollectionListOptions>;\n};\n\n\nexport type QueryFacetArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryFacetsArgs = {\n  options?: InputMaybe<FacetListOptions>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrderByCodeArgs = {\n  code: Scalars['String'];\n};\n\n\nexport type QueryProductArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  slug?: InputMaybe<Scalars['String']>;\n};\n\n\nexport type QueryProductsArgs = {\n  options?: InputMaybe<ProductListOptions>;\n};\n\n\nexport type QuerySearchArgs = {\n  input: SearchInput;\n};\n\nexport type RefreshCustomerVerificationResult = NativeAuthStrategyError | Success;\n\nexport type Refund = Node & {\n  __typename?: 'Refund';\n  adjustment: Scalars['Money'];\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  items: Scalars['Money'];\n  lines: Array<RefundLine>;\n  metadata?: Maybe<Scalars['JSON']>;\n  method?: Maybe<Scalars['String']>;\n  paymentId: Scalars['ID'];\n  reason?: Maybe<Scalars['String']>;\n  shipping: Scalars['Money'];\n  state: Scalars['String'];\n  total: Scalars['Money'];\n  transactionId?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type RefundLine = {\n  __typename?: 'RefundLine';\n  orderLine: OrderLine;\n  orderLineId: Scalars['ID'];\n  quantity: Scalars['Int'];\n  refund: Refund;\n  refundId: Scalars['ID'];\n};\n\nexport type Region = {\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  parent?: Maybe<Region>;\n  parentId?: Maybe<Scalars['ID']>;\n  translations: Array<RegionTranslation>;\n  type: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type RegionTranslation = {\n  __typename?: 'RegionTranslation';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type RegisterCustomerAccountResult = MissingPasswordError | NativeAuthStrategyError | PasswordValidationError | Success;\n\nexport type RegisterCustomerInput = {\n  emailAddress: Scalars['String'];\n  firstName?: InputMaybe<Scalars['String']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  password?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type RelationCustomFieldConfig = CustomField & {\n  __typename?: 'RelationCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  entity: Scalars['String'];\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  scalarFields: Array<Scalars['String']>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type RemoveOrderItemsResult = Order | OrderModificationError;\n\nexport type RequestPasswordResetResult = NativeAuthStrategyError | Success;\n\nexport type RequestUpdateCustomerEmailAddressResult = EmailAddressConflictError | InvalidCredentialsError | NativeAuthStrategyError | Success;\n\nexport type ResetPasswordResult = CurrentUser | NativeAuthStrategyError | NotVerifiedError | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError;\n\nexport type Role = Node & {\n  __typename?: 'Role';\n  channels: Array<Channel>;\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  permissions: Array<Permission>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type RoleList = PaginatedList & {\n  __typename?: 'RoleList';\n  items: Array<Role>;\n  totalItems: Scalars['Int'];\n};\n\nexport type SearchInput = {\n  collectionId?: InputMaybe<Scalars['ID']>;\n  collectionSlug?: InputMaybe<Scalars['String']>;\n  facetValueFilters?: InputMaybe<Array<FacetValueFilterInput>>;\n  groupByProduct?: InputMaybe<Scalars['Boolean']>;\n  skip?: InputMaybe<Scalars['Int']>;\n  sort?: InputMaybe<SearchResultSortParameter>;\n  take?: InputMaybe<Scalars['Int']>;\n  term?: InputMaybe<Scalars['String']>;\n};\n\nexport type SearchReindexResponse = {\n  __typename?: 'SearchReindexResponse';\n  success: Scalars['Boolean'];\n};\n\nexport type SearchResponse = {\n  __typename?: 'SearchResponse';\n  cacheIdentifier?: Maybe<SearchResponseCacheIdentifier>;\n  collections: Array<CollectionResult>;\n  facetValues: Array<FacetValueResult>;\n  items: Array<SearchResult>;\n  totalItems: Scalars['Int'];\n};\n\n/**\n * This type is here to allow us to easily purge the Stellate cache\n * of any search results where the collectionSlug is used. We cannot rely on\n * simply purging the SearchResult type, because in the case of an empty 'items'\n * array, Stellate cannot know that that particular query now needs to be purged.\n */\nexport type SearchResponseCacheIdentifier = {\n  __typename?: 'SearchResponseCacheIdentifier';\n  collectionSlug?: Maybe<Scalars['String']>;\n};\n\nexport type SearchResult = {\n  __typename?: 'SearchResult';\n  /** An array of ids of the Collections in which this result appears */\n  collectionIds: Array<Scalars['ID']>;\n  currencyCode: CurrencyCode;\n  description: Scalars['String'];\n  facetIds: Array<Scalars['ID']>;\n  facetValueIds: Array<Scalars['ID']>;\n  price: SearchResultPrice;\n  priceWithTax: SearchResultPrice;\n  productAsset?: Maybe<SearchResultAsset>;\n  productId: Scalars['ID'];\n  productName: Scalars['String'];\n  productVariantAsset?: Maybe<SearchResultAsset>;\n  productVariantId: Scalars['ID'];\n  productVariantName: Scalars['String'];\n  /** A relevance score for the result. Differs between database implementations */\n  score: Scalars['Float'];\n  sku: Scalars['String'];\n  slug: Scalars['String'];\n};\n\nexport type SearchResultAsset = {\n  __typename?: 'SearchResultAsset';\n  focalPoint?: Maybe<Coordinate>;\n  id: Scalars['ID'];\n  preview: Scalars['String'];\n};\n\n/** The price of a search result product, either as a range or as a single price */\nexport type SearchResultPrice = PriceRange | SinglePrice;\n\nexport type SearchResultSortParameter = {\n  name?: InputMaybe<SortOrder>;\n  price?: InputMaybe<SortOrder>;\n};\n\nexport type Seller = Node & {\n  __typename?: 'Seller';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type SetCustomerForOrderResult = AlreadyLoggedInError | EmailAddressConflictError | GuestCheckoutError | NoActiveOrderError | Order;\n\nexport type SetOrderShippingMethodResult = IneligibleShippingMethodError | NoActiveOrderError | Order | OrderModificationError;\n\nexport type ShippingLine = {\n  __typename?: 'ShippingLine';\n  discountedPrice: Scalars['Money'];\n  discountedPriceWithTax: Scalars['Money'];\n  discounts: Array<Discount>;\n  id: Scalars['ID'];\n  price: Scalars['Money'];\n  priceWithTax: Scalars['Money'];\n  shippingMethod: ShippingMethod;\n};\n\nexport type ShippingMethod = Node & {\n  __typename?: 'ShippingMethod';\n  calculator: ConfigurableOperation;\n  checker: ConfigurableOperation;\n  code: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  fulfillmentHandlerCode: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  translations: Array<ShippingMethodTranslation>;\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type ShippingMethodList = PaginatedList & {\n  __typename?: 'ShippingMethodList';\n  items: Array<ShippingMethod>;\n  totalItems: Scalars['Int'];\n};\n\nexport type ShippingMethodQuote = {\n  __typename?: 'ShippingMethodQuote';\n  code: Scalars['String'];\n  customFields?: Maybe<Scalars['JSON']>;\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  /** Any optional metadata returned by the ShippingCalculator in the ShippingCalculationResult */\n  metadata?: Maybe<Scalars['JSON']>;\n  name: Scalars['String'];\n  price: Scalars['Money'];\n  priceWithTax: Scalars['Money'];\n};\n\nexport type ShippingMethodTranslation = {\n  __typename?: 'ShippingMethodTranslation';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  languageCode: LanguageCode;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The price value where the result has a single price */\nexport type SinglePrice = {\n  __typename?: 'SinglePrice';\n  value: Scalars['Money'];\n};\n\nexport enum SortOrder {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type StringCustomFieldConfig = CustomField & {\n  __typename?: 'StringCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  length?: Maybe<Scalars['Int']>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  options?: Maybe<Array<StringFieldOption>>;\n  pattern?: Maybe<Scalars['String']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type StringFieldOption = {\n  __typename?: 'StringFieldOption';\n  label?: Maybe<Array<LocalizedString>>;\n  value: Scalars['String'];\n};\n\n/** Operators for filtering on a list of String fields */\nexport type StringListOperators = {\n  inList: Scalars['String'];\n};\n\n/** Operators for filtering on a String field */\nexport type StringOperators = {\n  contains?: InputMaybe<Scalars['String']>;\n  eq?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<Scalars['String']>>;\n  isNull?: InputMaybe<Scalars['Boolean']>;\n  notContains?: InputMaybe<Scalars['String']>;\n  notEq?: InputMaybe<Scalars['String']>;\n  notIn?: InputMaybe<Array<Scalars['String']>>;\n  regex?: InputMaybe<Scalars['String']>;\n};\n\n/** Indicates that an operation succeeded, where we do not want to return any more specific information. */\nexport type Success = {\n  __typename?: 'Success';\n  success: Scalars['Boolean'];\n};\n\nexport type Surcharge = Node & {\n  __typename?: 'Surcharge';\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  price: Scalars['Money'];\n  priceWithTax: Scalars['Money'];\n  sku?: Maybe<Scalars['String']>;\n  taxLines: Array<TaxLine>;\n  taxRate: Scalars['Float'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Tag = Node & {\n  __typename?: 'Tag';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['DateTime'];\n  value: Scalars['String'];\n};\n\nexport type TagList = PaginatedList & {\n  __typename?: 'TagList';\n  items: Array<Tag>;\n  totalItems: Scalars['Int'];\n};\n\nexport type TaxCategory = Node & {\n  __typename?: 'TaxCategory';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  isDefault: Scalars['Boolean'];\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type TaxLine = {\n  __typename?: 'TaxLine';\n  description: Scalars['String'];\n  taxRate: Scalars['Float'];\n};\n\nexport type TaxRate = Node & {\n  __typename?: 'TaxRate';\n  category: TaxCategory;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  customerGroup?: Maybe<CustomerGroup>;\n  enabled: Scalars['Boolean'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n  value: Scalars['Float'];\n  zone: Zone;\n};\n\nexport type TaxRateList = PaginatedList & {\n  __typename?: 'TaxRateList';\n  items: Array<TaxRate>;\n  totalItems: Scalars['Int'];\n};\n\nexport type TextCustomFieldConfig = CustomField & {\n  __typename?: 'TextCustomFieldConfig';\n  description?: Maybe<Array<LocalizedString>>;\n  internal?: Maybe<Scalars['Boolean']>;\n  label?: Maybe<Array<LocalizedString>>;\n  list: Scalars['Boolean'];\n  name: Scalars['String'];\n  nullable?: Maybe<Scalars['Boolean']>;\n  readonly?: Maybe<Scalars['Boolean']>;\n  requiresPermission?: Maybe<Array<Permission>>;\n  type: Scalars['String'];\n  ui?: Maybe<Scalars['JSON']>;\n};\n\nexport type TransitionOrderToStateResult = Order | OrderStateTransitionError;\n\n/**\n * Input used to update an Address.\n *\n * The countryCode must correspond to a `code` property of a Country that has been defined in the\n * Vendure server. The `code` property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\n * If an invalid code is passed, the mutation will fail.\n */\nexport type UpdateAddressInput = {\n  city?: InputMaybe<Scalars['String']>;\n  company?: InputMaybe<Scalars['String']>;\n  countryCode?: InputMaybe<Scalars['String']>;\n  customFields?: InputMaybe<Scalars['JSON']>;\n  defaultBillingAddress?: InputMaybe<Scalars['Boolean']>;\n  defaultShippingAddress?: InputMaybe<Scalars['Boolean']>;\n  fullName?: InputMaybe<Scalars['String']>;\n  id: Scalars['ID'];\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  postalCode?: InputMaybe<Scalars['String']>;\n  province?: InputMaybe<Scalars['String']>;\n  streetLine1?: InputMaybe<Scalars['String']>;\n  streetLine2?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateCustomerEmailAddressResult = IdentifierChangeTokenExpiredError | IdentifierChangeTokenInvalidError | NativeAuthStrategyError | Success;\n\nexport type UpdateCustomerInput = {\n  customFields?: InputMaybe<Scalars['JSON']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  title?: InputMaybe<Scalars['String']>;\n};\n\nexport type UpdateCustomerPasswordResult = InvalidCredentialsError | NativeAuthStrategyError | PasswordValidationError | Success;\n\nexport type UpdateOrderInput = {\n  customFields?: InputMaybe<Scalars['JSON']>;\n};\n\nexport type UpdateOrderItemsResult = InsufficientStockError | NegativeQuantityError | Order | OrderLimitError | OrderModificationError;\n\nexport type User = Node & {\n  __typename?: 'User';\n  authenticationMethods: Array<AuthenticationMethod>;\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  identifier: Scalars['String'];\n  lastLogin?: Maybe<Scalars['DateTime']>;\n  roles: Array<Role>;\n  updatedAt: Scalars['DateTime'];\n  verified: Scalars['Boolean'];\n};\n\n/**\n * Returned if the verification token (used to verify a Customer's email address) is valid, but has\n * expired according to the `verificationTokenDuration` setting in the AuthOptions.\n */\nexport type VerificationTokenExpiredError = ErrorResult & {\n  __typename?: 'VerificationTokenExpiredError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\n/**\n * Returned if the verification token (used to verify a Customer's email address) is either\n * invalid or does not match any expected tokens.\n */\nexport type VerificationTokenInvalidError = ErrorResult & {\n  __typename?: 'VerificationTokenInvalidError';\n  errorCode: ErrorCode;\n  message: Scalars['String'];\n};\n\nexport type VerifyCustomerAccountResult = CurrentUser | MissingPasswordError | NativeAuthStrategyError | PasswordAlreadySetError | PasswordValidationError | VerificationTokenExpiredError | VerificationTokenInvalidError;\n\nexport type Zone = Node & {\n  __typename?: 'Zone';\n  createdAt: Scalars['DateTime'];\n  customFields?: Maybe<Scalars['JSON']>;\n  id: Scalars['ID'];\n  members: Array<Region>;\n  name: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  rememberMe?: InputMaybe<Scalars['Boolean']>;\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login: { __typename: 'CurrentUser', id: string, identifier: string } | { __typename: 'InvalidCredentialsError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'NotVerifiedError', errorCode: ErrorCode, message: string } };\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = { __typename?: 'Mutation', logout: { __typename?: 'Success', success: boolean } };\n\nexport type RegisterCustomerAccountMutationVariables = Exact<{\n  input: RegisterCustomerInput;\n}>;\n\n\nexport type RegisterCustomerAccountMutation = { __typename?: 'Mutation', registerCustomerAccount: { __typename: 'MissingPasswordError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'PasswordValidationError', errorCode: ErrorCode, message: string } | { __typename: 'Success', success: boolean } };\n\nexport type VerifyCustomerAccountMutationVariables = Exact<{\n  token: Scalars['String'];\n  password?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type VerifyCustomerAccountMutation = { __typename?: 'Mutation', verifyCustomerAccount: { __typename: 'CurrentUser', id: string, identifier: string } | { __typename: 'MissingPasswordError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'PasswordAlreadySetError', errorCode: ErrorCode, message: string } | { __typename: 'PasswordValidationError', errorCode: ErrorCode, message: string } | { __typename: 'VerificationTokenExpiredError', errorCode: ErrorCode, message: string } | { __typename: 'VerificationTokenInvalidError', errorCode: ErrorCode, message: string } };\n\nexport type UpdateCustomerMutationVariables = Exact<{\n  input: UpdateCustomerInput;\n}>;\n\n\nexport type UpdateCustomerMutation = { __typename?: 'Mutation', updateCustomer: { __typename: 'Customer' } };\n\nexport type RequestUpdateCustomerEmailAddressMutationVariables = Exact<{\n  password: Scalars['String'];\n  newEmailAddress: Scalars['String'];\n}>;\n\n\nexport type RequestUpdateCustomerEmailAddressMutation = { __typename?: 'Mutation', requestUpdateCustomerEmailAddress: { __typename: 'EmailAddressConflictError', errorCode: ErrorCode, message: string } | { __typename: 'InvalidCredentialsError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'Success' } };\n\nexport type UpdateCustomerEmailAddressMutationVariables = Exact<{\n  token: Scalars['String'];\n}>;\n\n\nexport type UpdateCustomerEmailAddressMutation = { __typename?: 'Mutation', updateCustomerEmailAddress: { __typename: 'IdentifierChangeTokenExpiredError', errorCode: ErrorCode, message: string } | { __typename: 'IdentifierChangeTokenInvalidError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'Success' } };\n\nexport type UpdateCustomerAddressMutationVariables = Exact<{\n  input: UpdateAddressInput;\n}>;\n\n\nexport type UpdateCustomerAddressMutation = { __typename?: 'Mutation', updateCustomerAddress: { __typename: 'Address' } };\n\nexport type CreateCustomerAddressMutationVariables = Exact<{\n  input: CreateAddressInput;\n}>;\n\n\nexport type CreateCustomerAddressMutation = { __typename?: 'Mutation', createCustomerAddress: { __typename: 'Address' } };\n\nexport type DeleteCustomerAddressMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCustomerAddressMutation = { __typename?: 'Mutation', deleteCustomerAddress: { __typename?: 'Success', success: boolean } };\n\nexport type UpdateCustomerPasswordMutationVariables = Exact<{\n  currentPassword: Scalars['String'];\n  newPassword: Scalars['String'];\n}>;\n\n\nexport type UpdateCustomerPasswordMutation = { __typename?: 'Mutation', updateCustomerPassword: { __typename: 'InvalidCredentialsError', errorCode: ErrorCode, message: string } | { __typename: 'NativeAuthStrategyError', errorCode: ErrorCode, message: string } | { __typename: 'PasswordValidationError', errorCode: ErrorCode, message: string } | { __typename: 'Success', success: boolean } };\n\nexport type ActiveChannelQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ActiveChannelQuery = { __typename?: 'Query', activeChannel: { __typename?: 'Channel', id: string, currencyCode: CurrencyCode } };\n\nexport type EligibleShippingMethodsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type EligibleShippingMethodsQuery = { __typename?: 'Query', eligibleShippingMethods: Array<{ __typename?: 'ShippingMethodQuote', id: string, name: string, description: string, metadata?: any | null, price: number, priceWithTax: number }> };\n\nexport type EligiblePaymentMethodsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type EligiblePaymentMethodsQuery = { __typename?: 'Query', eligiblePaymentMethods: Array<{ __typename?: 'PaymentMethodQuote', id: string, code: string, name: string, description: string, eligibilityMessage?: string | null, isEligible: boolean }> };\n\nexport type NextOrderStatesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NextOrderStatesQuery = { __typename?: 'Query', nextOrderStates: Array<string> };\n\nexport type AvailableCountriesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AvailableCountriesQuery = { __typename?: 'Query', availableCountries: Array<{ __typename?: 'Country', id: string, name: string, code: string }> };\n\nexport type AddPaymentToOrderMutationVariables = Exact<{\n  input: PaymentInput;\n}>;\n\n\nexport type AddPaymentToOrderMutation = { __typename?: 'Mutation', addPaymentToOrder: { __typename?: 'IneligiblePaymentMethodError', errorCode: ErrorCode, message: string } | { __typename?: 'NoActiveOrderError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderPaymentStateError', errorCode: ErrorCode, message: string } | { __typename?: 'OrderStateTransitionError', errorCode: ErrorCode, message: string } | { __typename?: 'PaymentDeclinedError', errorCode: ErrorCode, message: string } | { __typename?: 'PaymentFailedError', errorCode: ErrorCode, message: string } };\n\nexport type TransitionOrderToStateMutationVariables = Exact<{\n  state: Scalars['String'];\n}>;\n\n\nexport type TransitionOrderToStateMutation = { __typename?: 'Mutation', transitionOrderToState?: { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderStateTransitionError', errorCode: ErrorCode, message: string } | null };\n\nexport type CreateStripePaymentIntentMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CreateStripePaymentIntentMutation = { __typename?: 'Mutation', createStripePaymentIntent?: string | null };\n\nexport type GenerateBraintreeClientTokenQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GenerateBraintreeClientTokenQuery = { __typename?: 'Query', generateBraintreeClientToken?: string | null };\n\nexport type CollectionsQueryVariables = Exact<{\n  options?: InputMaybe<CollectionListOptions>;\n}>;\n\n\nexport type CollectionsQuery = { __typename?: 'Query', collections: { __typename?: 'CollectionList', items: Array<{ __typename?: 'Collection', id: string, name: string, slug: string, parent?: { __typename?: 'Collection', name: string } | null, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null }> } };\n\nexport type CollectionQueryVariables = Exact<{\n  slug?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n}>;\n\n\nexport type CollectionQuery = { __typename?: 'Query', collection?: { __typename?: 'Collection', id: string, name: string, slug: string, breadcrumbs: Array<{ __typename?: 'CollectionBreadcrumb', id: string, name: string, slug: string }>, children?: Array<{ __typename?: 'Collection', id: string, name: string, slug: string, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null }> | null } | null };\n\nexport type ActiveCustomerQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ActiveCustomerQuery = { __typename?: 'Query', activeCustomer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string } | null };\n\nexport type ActiveCustomerDetailsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ActiveCustomerDetailsQuery = { __typename?: 'Query', activeCustomer?: { __typename?: 'Customer', id: string, title?: string | null, firstName: string, lastName: string, phoneNumber?: string | null, emailAddress: string } | null };\n\nexport type ActiveCustomerAddressesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ActiveCustomerAddressesQuery = { __typename?: 'Query', activeCustomer?: { __typename?: 'Customer', id: string, addresses?: Array<{ __typename?: 'Address', id: string, company?: string | null, fullName?: string | null, streetLine1: string, streetLine2?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, phoneNumber?: string | null, defaultShippingAddress?: boolean | null, defaultBillingAddress?: boolean | null, country: { __typename?: 'Country', id: string, code: string, name: string } }> | null } | null };\n\nexport type ActiveCustomerOrderListQueryVariables = Exact<{\n  orderListOptions?: InputMaybe<OrderListOptions>;\n}>;\n\n\nexport type ActiveCustomerOrderListQuery = { __typename?: 'Query', activeCustomer?: { __typename?: 'Customer', orders: { __typename?: 'OrderList', totalItems: number, items: Array<{ __typename?: 'Order', code: string, state: string, orderPlacedAt?: any | null, currencyCode: CurrencyCode, subTotal: number, subTotalWithTax: number, total: number, totalWithTax: number, shippingWithTax: number, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number }>, taxSummary: Array<{ __typename?: 'OrderTaxSummary', taxBase: number, taxTotal: number }>, discounts: Array<{ __typename?: 'Discount', amountWithTax: number }>, fulfillments?: Array<{ __typename?: 'Fulfillment', trackingCode?: string | null }> | null, lines: Array<{ __typename?: 'OrderLine', quantity: number, discountedLinePriceWithTax: number, discountedUnitPriceWithTax: number, fulfillmentLines?: Array<{ __typename?: 'FulfillmentLine', quantity: number, fulfillment: { __typename?: 'Fulfillment', state: string, updatedAt: any } }> | null, featuredAsset?: { __typename?: 'Asset', name: string, source: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', name: string, sku: string, currencyCode: CurrencyCode, priceWithTax: number, product: { __typename?: 'Product', slug: string } } }> }> } } | null };\n\nexport type SetCustomerForOrderMutationVariables = Exact<{\n  input: CreateCustomerInput;\n}>;\n\n\nexport type SetCustomerForOrderMutation = { __typename?: 'Mutation', setCustomerForOrder: { __typename?: 'AlreadyLoggedInError', errorCode: ErrorCode, message: string } | { __typename?: 'EmailAddressConflictError', errorCode: ErrorCode, message: string } | { __typename?: 'GuestCheckoutError', errorCode: ErrorCode, message: string } | { __typename?: 'NoActiveOrderError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } };\n\nexport type SetOrderShippingAddressMutationVariables = Exact<{\n  input: CreateAddressInput;\n}>;\n\n\nexport type SetOrderShippingAddressMutation = { __typename?: 'Mutation', setOrderShippingAddress: { __typename?: 'NoActiveOrderError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } };\n\nexport type SetOrderShippingMethodMutationVariables = Exact<{\n  shippingMethodId: Array<Scalars['ID']> | Scalars['ID'];\n}>;\n\n\nexport type SetOrderShippingMethodMutation = { __typename?: 'Mutation', setOrderShippingMethod: { __typename?: 'IneligibleShippingMethodError', errorCode: ErrorCode, message: string } | { __typename?: 'NoActiveOrderError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderModificationError', errorCode: ErrorCode, message: string } };\n\nexport type AddItemToOrderMutationVariables = Exact<{\n  productVariantId: Scalars['ID'];\n  quantity: Scalars['Int'];\n}>;\n\n\nexport type AddItemToOrderMutation = { __typename?: 'Mutation', addItemToOrder: { __typename?: 'InsufficientStockError', errorCode: ErrorCode, message: string } | { __typename?: 'NegativeQuantityError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderLimitError', errorCode: ErrorCode, message: string } | { __typename?: 'OrderModificationError', errorCode: ErrorCode, message: string } };\n\nexport type RemoveOrderLineMutationVariables = Exact<{\n  orderLineId: Scalars['ID'];\n}>;\n\n\nexport type RemoveOrderLineMutation = { __typename?: 'Mutation', removeOrderLine: { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderModificationError', errorCode: ErrorCode, message: string } };\n\nexport type AdjustOrderLineMutationVariables = Exact<{\n  orderLineId: Scalars['ID'];\n  quantity: Scalars['Int'];\n}>;\n\n\nexport type AdjustOrderLineMutation = { __typename?: 'Mutation', adjustOrderLine: { __typename?: 'InsufficientStockError', errorCode: ErrorCode, message: string } | { __typename?: 'NegativeQuantityError', errorCode: ErrorCode, message: string } | { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | { __typename?: 'OrderLimitError', errorCode: ErrorCode, message: string } | { __typename?: 'OrderModificationError', errorCode: ErrorCode, message: string } };\n\nexport type OrderDetailFragment = { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null };\n\nexport type ActiveOrderQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ActiveOrderQuery = { __typename?: 'Query', activeOrder?: { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | null };\n\nexport type OrderByCodeQueryVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type OrderByCodeQuery = { __typename?: 'Query', orderByCode?: { __typename: 'Order', id: string, code: string, active: boolean, createdAt: any, state: string, currencyCode: CurrencyCode, totalQuantity: number, subTotal: number, subTotalWithTax: number, shippingWithTax: number, totalWithTax: number, taxSummary: Array<{ __typename?: 'OrderTaxSummary', description: string, taxRate: number, taxTotal: number }>, customer?: { __typename?: 'Customer', id: string, firstName: string, lastName: string, emailAddress: string } | null, shippingAddress?: { __typename?: 'OrderAddress', fullName?: string | null, streetLine1?: string | null, streetLine2?: string | null, company?: string | null, city?: string | null, province?: string | null, postalCode?: string | null, countryCode?: string | null, phoneNumber?: string | null } | null, shippingLines: Array<{ __typename?: 'ShippingLine', priceWithTax: number, shippingMethod: { __typename?: 'ShippingMethod', id: string, name: string } }>, lines: Array<{ __typename?: 'OrderLine', id: string, unitPriceWithTax: number, linePriceWithTax: number, quantity: number, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, productVariant: { __typename?: 'ProductVariant', id: string, name: string, price: number, product: { __typename?: 'Product', id: string, slug: string } } }>, payments?: Array<{ __typename?: 'Payment', id: string, state: string, method: string, amount: number, metadata?: any | null }> | null } | null };\n\nexport type DetailedProductFragment = { __typename?: 'Product', id: string, name: string, description: string, collections: Array<{ __typename?: 'Collection', id: string, slug: string, name: string, breadcrumbs: Array<{ __typename?: 'CollectionBreadcrumb', id: string, name: string, slug: string }> }>, facetValues: Array<{ __typename?: 'FacetValue', id: string, code: string, name: string, facet: { __typename?: 'Facet', id: string, code: string, name: string } }>, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, assets: Array<{ __typename?: 'Asset', id: string, preview: string }>, variants: Array<{ __typename?: 'ProductVariant', id: string, name: string, priceWithTax: number, currencyCode: CurrencyCode, sku: string, stockLevel: string, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null }> };\n\nexport type ProductQueryVariables = Exact<{\n  slug?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n}>;\n\n\nexport type ProductQuery = { __typename?: 'Query', product?: { __typename?: 'Product', id: string, name: string, description: string, collections: Array<{ __typename?: 'Collection', id: string, slug: string, name: string, breadcrumbs: Array<{ __typename?: 'CollectionBreadcrumb', id: string, name: string, slug: string }> }>, facetValues: Array<{ __typename?: 'FacetValue', id: string, code: string, name: string, facet: { __typename?: 'Facet', id: string, code: string, name: string } }>, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null, assets: Array<{ __typename?: 'Asset', id: string, preview: string }>, variants: Array<{ __typename?: 'ProductVariant', id: string, name: string, priceWithTax: number, currencyCode: CurrencyCode, sku: string, stockLevel: string, featuredAsset?: { __typename?: 'Asset', id: string, preview: string } | null }> } | null };\n\nexport type ListedProductFragment = { __typename?: 'SearchResult', productId: string, productName: string, slug: string, currencyCode: CurrencyCode, productAsset?: { __typename?: 'SearchResultAsset', id: string, preview: string } | null, priceWithTax: { __typename?: 'PriceRange', min: number, max: number } | { __typename?: 'SinglePrice', value: number } };\n\nexport type SearchQueryVariables = Exact<{\n  input: SearchInput;\n}>;\n\n\nexport type SearchQuery = { __typename?: 'Query', search: { __typename?: 'SearchResponse', totalItems: number, items: Array<{ __typename?: 'SearchResult', productId: string, productName: string, slug: string, currencyCode: CurrencyCode, productAsset?: { __typename?: 'SearchResultAsset', id: string, preview: string } | null, priceWithTax: { __typename?: 'PriceRange', min: number, max: number } | { __typename?: 'SinglePrice', value: number } }>, facetValues: Array<{ __typename?: 'FacetValueResult', count: number, facetValue: { __typename?: 'FacetValue', id: string, name: string, facet: { __typename?: 'Facet', id: string, name: string } } }> } };\n\nexport type SearchFacetValuesQueryVariables = Exact<{\n  input: SearchInput;\n}>;\n\n\nexport type SearchFacetValuesQuery = { __typename?: 'Query', search: { __typename?: 'SearchResponse', totalItems: number, facetValues: Array<{ __typename?: 'FacetValueResult', count: number, facetValue: { __typename?: 'FacetValue', id: string, name: string, facet: { __typename?: 'Facet', id: string, name: string } } }> } };\n\nexport const OrderDetailFragmentDoc = gql`\n    fragment OrderDetail on Order {\n  __typename\n  id\n  code\n  active\n  createdAt\n  state\n  currencyCode\n  totalQuantity\n  subTotal\n  subTotalWithTax\n  taxSummary {\n    description\n    taxRate\n    taxTotal\n  }\n  shippingWithTax\n  totalWithTax\n  customer {\n    id\n    firstName\n    lastName\n    emailAddress\n  }\n  shippingAddress {\n    fullName\n    streetLine1\n    streetLine2\n    company\n    city\n    province\n    postalCode\n    countryCode\n    phoneNumber\n  }\n  shippingLines {\n    shippingMethod {\n      id\n      name\n    }\n    priceWithTax\n  }\n  lines {\n    id\n    unitPriceWithTax\n    linePriceWithTax\n    quantity\n    featuredAsset {\n      id\n      preview\n    }\n    productVariant {\n      id\n      name\n      price\n      product {\n        id\n        slug\n      }\n    }\n  }\n  payments {\n    id\n    state\n    method\n    amount\n    metadata\n  }\n}\n    `;\nexport const DetailedProductFragmentDoc = gql`\n    fragment DetailedProduct on Product {\n  id\n  name\n  description\n  collections {\n    id\n    slug\n    name\n    breadcrumbs {\n      id\n      name\n      slug\n    }\n  }\n  facetValues {\n    facet {\n      id\n      code\n      name\n    }\n    id\n    code\n    name\n  }\n  featuredAsset {\n    id\n    preview\n  }\n  assets {\n    id\n    preview\n  }\n  variants {\n    id\n    name\n    priceWithTax\n    currencyCode\n    sku\n    stockLevel\n    featuredAsset {\n      id\n      preview\n    }\n  }\n}\n    `;\nexport const ListedProductFragmentDoc = gql`\n    fragment ListedProduct on SearchResult {\n  productId\n  productName\n  slug\n  productAsset {\n    id\n    preview\n  }\n  currencyCode\n  priceWithTax {\n    ... on PriceRange {\n      min\n      max\n    }\n    ... on SinglePrice {\n      value\n    }\n  }\n}\n    `;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!, $rememberMe: Boolean) {\n  login(username: $email, password: $password, rememberMe: $rememberMe) {\n    __typename\n    ... on CurrentUser {\n      id\n      identifier\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout {\n    success\n  }\n}\n    `;\nexport const RegisterCustomerAccountDocument = gql`\n    mutation registerCustomerAccount($input: RegisterCustomerInput!) {\n  registerCustomerAccount(input: $input) {\n    __typename\n    ... on Success {\n      success\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const VerifyCustomerAccountDocument = gql`\n    mutation verifyCustomerAccount($token: String!, $password: String) {\n  verifyCustomerAccount(token: $token, password: $password) {\n    __typename\n    ... on CurrentUser {\n      id\n      identifier\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const UpdateCustomerDocument = gql`\n    mutation updateCustomer($input: UpdateCustomerInput!) {\n  updateCustomer(input: $input) {\n    __typename\n  }\n}\n    `;\nexport const RequestUpdateCustomerEmailAddressDocument = gql`\n    mutation requestUpdateCustomerEmailAddress($password: String!, $newEmailAddress: String!) {\n  requestUpdateCustomerEmailAddress(\n    password: $password\n    newEmailAddress: $newEmailAddress\n  ) {\n    __typename\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const UpdateCustomerEmailAddressDocument = gql`\n    mutation updateCustomerEmailAddress($token: String!) {\n  updateCustomerEmailAddress(token: $token) {\n    __typename\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const UpdateCustomerAddressDocument = gql`\n    mutation updateCustomerAddress($input: UpdateAddressInput!) {\n  updateCustomerAddress(input: $input) {\n    __typename\n  }\n}\n    `;\nexport const CreateCustomerAddressDocument = gql`\n    mutation createCustomerAddress($input: CreateAddressInput!) {\n  createCustomerAddress(input: $input) {\n    __typename\n  }\n}\n    `;\nexport const DeleteCustomerAddressDocument = gql`\n    mutation deleteCustomerAddress($id: ID!) {\n  deleteCustomerAddress(id: $id) {\n    success\n  }\n}\n    `;\nexport const UpdateCustomerPasswordDocument = gql`\n    mutation updateCustomerPassword($currentPassword: String!, $newPassword: String!) {\n  updateCustomerPassword(\n    currentPassword: $currentPassword\n    newPassword: $newPassword\n  ) {\n    __typename\n    ... on Success {\n      success\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    `;\nexport const ActiveChannelDocument = gql`\n    query activeChannel {\n  activeChannel {\n    id\n    currencyCode\n  }\n}\n    `;\nexport const EligibleShippingMethodsDocument = gql`\n    query eligibleShippingMethods {\n  eligibleShippingMethods {\n    id\n    name\n    description\n    metadata\n    price\n    priceWithTax\n  }\n}\n    `;\nexport const EligiblePaymentMethodsDocument = gql`\n    query eligiblePaymentMethods {\n  eligiblePaymentMethods {\n    id\n    code\n    name\n    description\n    eligibilityMessage\n    isEligible\n  }\n}\n    `;\nexport const NextOrderStatesDocument = gql`\n    query nextOrderStates {\n  nextOrderStates\n}\n    `;\nexport const AvailableCountriesDocument = gql`\n    query availableCountries {\n  availableCountries {\n    id\n    name\n    code\n  }\n}\n    `;\nexport const AddPaymentToOrderDocument = gql`\n    mutation addPaymentToOrder($input: PaymentInput!) {\n  addPaymentToOrder(input: $input) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const TransitionOrderToStateDocument = gql`\n    mutation transitionOrderToState($state: String!) {\n  transitionOrderToState(state: $state) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const CreateStripePaymentIntentDocument = gql`\n    mutation createStripePaymentIntent {\n  createStripePaymentIntent\n}\n    `;\nexport const GenerateBraintreeClientTokenDocument = gql`\n    query generateBraintreeClientToken {\n  generateBraintreeClientToken\n}\n    `;\nexport const CollectionsDocument = gql`\n    query collections($options: CollectionListOptions) {\n  collections(options: $options) {\n    items {\n      id\n      name\n      slug\n      parent {\n        name\n      }\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n}\n    `;\nexport const CollectionDocument = gql`\n    query collection($slug: String, $id: ID) {\n  collection(slug: $slug, id: $id) {\n    id\n    name\n    slug\n    breadcrumbs {\n      id\n      name\n      slug\n    }\n    children {\n      id\n      name\n      slug\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n}\n    `;\nexport const ActiveCustomerDocument = gql`\n    query activeCustomer {\n  activeCustomer {\n    id\n    firstName\n    lastName\n  }\n}\n    `;\nexport const ActiveCustomerDetailsDocument = gql`\n    query activeCustomerDetails {\n  activeCustomer {\n    id\n    title\n    firstName\n    lastName\n    phoneNumber\n    emailAddress\n  }\n}\n    `;\nexport const ActiveCustomerAddressesDocument = gql`\n    query activeCustomerAddresses {\n  activeCustomer {\n    id\n    addresses {\n      id\n      company\n      fullName\n      streetLine1\n      streetLine2\n      city\n      province\n      postalCode\n      country {\n        id\n        code\n        name\n      }\n      phoneNumber\n      defaultShippingAddress\n      defaultBillingAddress\n    }\n  }\n}\n    `;\nexport const ActiveCustomerOrderListDocument = gql`\n    query activeCustomerOrderList($orderListOptions: OrderListOptions) {\n  activeCustomer {\n    orders(options: $orderListOptions) {\n      totalItems\n      items {\n        code\n        state\n        orderPlacedAt\n        currencyCode\n        subTotal\n        subTotalWithTax\n        total\n        totalWithTax\n        shippingWithTax\n        shippingLines {\n          priceWithTax\n        }\n        taxSummary {\n          taxBase\n          taxTotal\n        }\n        discounts {\n          amountWithTax\n        }\n        fulfillments {\n          trackingCode\n        }\n        lines {\n          quantity\n          discountedLinePriceWithTax\n          discountedUnitPriceWithTax\n          fulfillmentLines {\n            quantity\n            fulfillment {\n              state\n              updatedAt\n            }\n          }\n          featuredAsset {\n            name\n            source\n            preview\n          }\n          productVariant {\n            name\n            sku\n            currencyCode\n            priceWithTax\n            product {\n              slug\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport const SetCustomerForOrderDocument = gql`\n    mutation setCustomerForOrder($input: CreateCustomerInput!) {\n  setCustomerForOrder(input: $input) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const SetOrderShippingAddressDocument = gql`\n    mutation setOrderShippingAddress($input: CreateAddressInput!) {\n  setOrderShippingAddress(input: $input) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const SetOrderShippingMethodDocument = gql`\n    mutation setOrderShippingMethod($shippingMethodId: [ID!]!) {\n  setOrderShippingMethod(shippingMethodId: $shippingMethodId) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const AddItemToOrderDocument = gql`\n    mutation addItemToOrder($productVariantId: ID!, $quantity: Int!) {\n  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const RemoveOrderLineDocument = gql`\n    mutation removeOrderLine($orderLineId: ID!) {\n  removeOrderLine(orderLineId: $orderLineId) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const AdjustOrderLineDocument = gql`\n    mutation adjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n    ...OrderDetail\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const ActiveOrderDocument = gql`\n    query activeOrder {\n  activeOrder {\n    ...OrderDetail\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const OrderByCodeDocument = gql`\n    query orderByCode($code: String!) {\n  orderByCode(code: $code) {\n    ...OrderDetail\n  }\n}\n    ${OrderDetailFragmentDoc}`;\nexport const ProductDocument = gql`\n    query product($slug: String, $id: ID) {\n  product(slug: $slug, id: $id) {\n    ...DetailedProduct\n  }\n}\n    ${DetailedProductFragmentDoc}`;\nexport const SearchDocument = gql`\n    query search($input: SearchInput!) {\n  search(input: $input) {\n    totalItems\n    items {\n      ...ListedProduct\n    }\n    facetValues {\n      count\n      facetValue {\n        id\n        name\n        facet {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n    ${ListedProductFragmentDoc}`;\nexport const SearchFacetValuesDocument = gql`\n    query searchFacetValues($input: SearchInput!) {\n  search(input: $input) {\n    totalItems\n    facetValues {\n      count\n      facetValue {\n        id\n        name\n        facet {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n    `;\nexport type Requester<C = {}, E = unknown> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>\nexport function getSdk<C, E>(requester: Requester<C, E>) {\n  return {\n    login(variables: LoginMutationVariables, options?: C): Promise<LoginMutation> {\n      return requester<LoginMutation, LoginMutationVariables>(LoginDocument, variables, options) as Promise<LoginMutation>;\n    },\n    logout(variables?: LogoutMutationVariables, options?: C): Promise<LogoutMutation> {\n      return requester<LogoutMutation, LogoutMutationVariables>(LogoutDocument, variables, options) as Promise<LogoutMutation>;\n    },\n    registerCustomerAccount(variables: RegisterCustomerAccountMutationVariables, options?: C): Promise<RegisterCustomerAccountMutation> {\n      return requester<RegisterCustomerAccountMutation, RegisterCustomerAccountMutationVariables>(RegisterCustomerAccountDocument, variables, options) as Promise<RegisterCustomerAccountMutation>;\n    },\n    verifyCustomerAccount(variables: VerifyCustomerAccountMutationVariables, options?: C): Promise<VerifyCustomerAccountMutation> {\n      return requester<VerifyCustomerAccountMutation, VerifyCustomerAccountMutationVariables>(VerifyCustomerAccountDocument, variables, options) as Promise<VerifyCustomerAccountMutation>;\n    },\n    updateCustomer(variables: UpdateCustomerMutationVariables, options?: C): Promise<UpdateCustomerMutation> {\n      return requester<UpdateCustomerMutation, UpdateCustomerMutationVariables>(UpdateCustomerDocument, variables, options) as Promise<UpdateCustomerMutation>;\n    },\n    requestUpdateCustomerEmailAddress(variables: RequestUpdateCustomerEmailAddressMutationVariables, options?: C): Promise<RequestUpdateCustomerEmailAddressMutation> {\n      return requester<RequestUpdateCustomerEmailAddressMutation, RequestUpdateCustomerEmailAddressMutationVariables>(RequestUpdateCustomerEmailAddressDocument, variables, options) as Promise<RequestUpdateCustomerEmailAddressMutation>;\n    },\n    updateCustomerEmailAddress(variables: UpdateCustomerEmailAddressMutationVariables, options?: C): Promise<UpdateCustomerEmailAddressMutation> {\n      return requester<UpdateCustomerEmailAddressMutation, UpdateCustomerEmailAddressMutationVariables>(UpdateCustomerEmailAddressDocument, variables, options) as Promise<UpdateCustomerEmailAddressMutation>;\n    },\n    updateCustomerAddress(variables: UpdateCustomerAddressMutationVariables, options?: C): Promise<UpdateCustomerAddressMutation> {\n      return requester<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>(UpdateCustomerAddressDocument, variables, options) as Promise<UpdateCustomerAddressMutation>;\n    },\n    createCustomerAddress(variables: CreateCustomerAddressMutationVariables, options?: C): Promise<CreateCustomerAddressMutation> {\n      return requester<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>(CreateCustomerAddressDocument, variables, options) as Promise<CreateCustomerAddressMutation>;\n    },\n    deleteCustomerAddress(variables: DeleteCustomerAddressMutationVariables, options?: C): Promise<DeleteCustomerAddressMutation> {\n      return requester<DeleteCustomerAddressMutation, DeleteCustomerAddressMutationVariables>(DeleteCustomerAddressDocument, variables, options) as Promise<DeleteCustomerAddressMutation>;\n    },\n    updateCustomerPassword(variables: UpdateCustomerPasswordMutationVariables, options?: C): Promise<UpdateCustomerPasswordMutation> {\n      return requester<UpdateCustomerPasswordMutation, UpdateCustomerPasswordMutationVariables>(UpdateCustomerPasswordDocument, variables, options) as Promise<UpdateCustomerPasswordMutation>;\n    },\n    activeChannel(variables?: ActiveChannelQueryVariables, options?: C): Promise<ActiveChannelQuery> {\n      return requester<ActiveChannelQuery, ActiveChannelQueryVariables>(ActiveChannelDocument, variables, options) as Promise<ActiveChannelQuery>;\n    },\n    eligibleShippingMethods(variables?: EligibleShippingMethodsQueryVariables, options?: C): Promise<EligibleShippingMethodsQuery> {\n      return requester<EligibleShippingMethodsQuery, EligibleShippingMethodsQueryVariables>(EligibleShippingMethodsDocument, variables, options) as Promise<EligibleShippingMethodsQuery>;\n    },\n    eligiblePaymentMethods(variables?: EligiblePaymentMethodsQueryVariables, options?: C): Promise<EligiblePaymentMethodsQuery> {\n      return requester<EligiblePaymentMethodsQuery, EligiblePaymentMethodsQueryVariables>(EligiblePaymentMethodsDocument, variables, options) as Promise<EligiblePaymentMethodsQuery>;\n    },\n    nextOrderStates(variables?: NextOrderStatesQueryVariables, options?: C): Promise<NextOrderStatesQuery> {\n      return requester<NextOrderStatesQuery, NextOrderStatesQueryVariables>(NextOrderStatesDocument, variables, options) as Promise<NextOrderStatesQuery>;\n    },\n    availableCountries(variables?: AvailableCountriesQueryVariables, options?: C): Promise<AvailableCountriesQuery> {\n      return requester<AvailableCountriesQuery, AvailableCountriesQueryVariables>(AvailableCountriesDocument, variables, options) as Promise<AvailableCountriesQuery>;\n    },\n    addPaymentToOrder(variables: AddPaymentToOrderMutationVariables, options?: C): Promise<AddPaymentToOrderMutation> {\n      return requester<AddPaymentToOrderMutation, AddPaymentToOrderMutationVariables>(AddPaymentToOrderDocument, variables, options) as Promise<AddPaymentToOrderMutation>;\n    },\n    transitionOrderToState(variables: TransitionOrderToStateMutationVariables, options?: C): Promise<TransitionOrderToStateMutation> {\n      return requester<TransitionOrderToStateMutation, TransitionOrderToStateMutationVariables>(TransitionOrderToStateDocument, variables, options) as Promise<TransitionOrderToStateMutation>;\n    },\n    createStripePaymentIntent(variables?: CreateStripePaymentIntentMutationVariables, options?: C): Promise<CreateStripePaymentIntentMutation> {\n      return requester<CreateStripePaymentIntentMutation, CreateStripePaymentIntentMutationVariables>(CreateStripePaymentIntentDocument, variables, options) as Promise<CreateStripePaymentIntentMutation>;\n    },\n    generateBraintreeClientToken(variables?: GenerateBraintreeClientTokenQueryVariables, options?: C): Promise<GenerateBraintreeClientTokenQuery> {\n      return requester<GenerateBraintreeClientTokenQuery, GenerateBraintreeClientTokenQueryVariables>(GenerateBraintreeClientTokenDocument, variables, options) as Promise<GenerateBraintreeClientTokenQuery>;\n    },\n    collections(variables?: CollectionsQueryVariables, options?: C): Promise<CollectionsQuery> {\n      return requester<CollectionsQuery, CollectionsQueryVariables>(CollectionsDocument, variables, options) as Promise<CollectionsQuery>;\n    },\n    collection(variables?: CollectionQueryVariables, options?: C): Promise<CollectionQuery> {\n      return requester<CollectionQuery, CollectionQueryVariables>(CollectionDocument, variables, options) as Promise<CollectionQuery>;\n    },\n    activeCustomer(variables?: ActiveCustomerQueryVariables, options?: C): Promise<ActiveCustomerQuery> {\n      return requester<ActiveCustomerQuery, ActiveCustomerQueryVariables>(ActiveCustomerDocument, variables, options) as Promise<ActiveCustomerQuery>;\n    },\n    activeCustomerDetails(variables?: ActiveCustomerDetailsQueryVariables, options?: C): Promise<ActiveCustomerDetailsQuery> {\n      return requester<ActiveCustomerDetailsQuery, ActiveCustomerDetailsQueryVariables>(ActiveCustomerDetailsDocument, variables, options) as Promise<ActiveCustomerDetailsQuery>;\n    },\n    activeCustomerAddresses(variables?: ActiveCustomerAddressesQueryVariables, options?: C): Promise<ActiveCustomerAddressesQuery> {\n      return requester<ActiveCustomerAddressesQuery, ActiveCustomerAddressesQueryVariables>(ActiveCustomerAddressesDocument, variables, options) as Promise<ActiveCustomerAddressesQuery>;\n    },\n    activeCustomerOrderList(variables?: ActiveCustomerOrderListQueryVariables, options?: C): Promise<ActiveCustomerOrderListQuery> {\n      return requester<ActiveCustomerOrderListQuery, ActiveCustomerOrderListQueryVariables>(ActiveCustomerOrderListDocument, variables, options) as Promise<ActiveCustomerOrderListQuery>;\n    },\n    setCustomerForOrder(variables: SetCustomerForOrderMutationVariables, options?: C): Promise<SetCustomerForOrderMutation> {\n      return requester<SetCustomerForOrderMutation, SetCustomerForOrderMutationVariables>(SetCustomerForOrderDocument, variables, options) as Promise<SetCustomerForOrderMutation>;\n    },\n    setOrderShippingAddress(variables: SetOrderShippingAddressMutationVariables, options?: C): Promise<SetOrderShippingAddressMutation> {\n      return requester<SetOrderShippingAddressMutation, SetOrderShippingAddressMutationVariables>(SetOrderShippingAddressDocument, variables, options) as Promise<SetOrderShippingAddressMutation>;\n    },\n    setOrderShippingMethod(variables: SetOrderShippingMethodMutationVariables, options?: C): Promise<SetOrderShippingMethodMutation> {\n      return requester<SetOrderShippingMethodMutation, SetOrderShippingMethodMutationVariables>(SetOrderShippingMethodDocument, variables, options) as Promise<SetOrderShippingMethodMutation>;\n    },\n    addItemToOrder(variables: AddItemToOrderMutationVariables, options?: C): Promise<AddItemToOrderMutation> {\n      return requester<AddItemToOrderMutation, AddItemToOrderMutationVariables>(AddItemToOrderDocument, variables, options) as Promise<AddItemToOrderMutation>;\n    },\n    removeOrderLine(variables: RemoveOrderLineMutationVariables, options?: C): Promise<RemoveOrderLineMutation> {\n      return requester<RemoveOrderLineMutation, RemoveOrderLineMutationVariables>(RemoveOrderLineDocument, variables, options) as Promise<RemoveOrderLineMutation>;\n    },\n    adjustOrderLine(variables: AdjustOrderLineMutationVariables, options?: C): Promise<AdjustOrderLineMutation> {\n      return requester<AdjustOrderLineMutation, AdjustOrderLineMutationVariables>(AdjustOrderLineDocument, variables, options) as Promise<AdjustOrderLineMutation>;\n    },\n    activeOrder(variables?: ActiveOrderQueryVariables, options?: C): Promise<ActiveOrderQuery> {\n      return requester<ActiveOrderQuery, ActiveOrderQueryVariables>(ActiveOrderDocument, variables, options) as Promise<ActiveOrderQuery>;\n    },\n    orderByCode(variables: OrderByCodeQueryVariables, options?: C): Promise<OrderByCodeQuery> {\n      return requester<OrderByCodeQuery, OrderByCodeQueryVariables>(OrderByCodeDocument, variables, options) as Promise<OrderByCodeQuery>;\n    },\n    product(variables?: ProductQueryVariables, options?: C): Promise<ProductQuery> {\n      return requester<ProductQuery, ProductQueryVariables>(ProductDocument, variables, options) as Promise<ProductQuery>;\n    },\n    search(variables: SearchQueryVariables, options?: C): Promise<SearchQuery> {\n      return requester<SearchQuery, SearchQueryVariables>(SearchDocument, variables, options) as Promise<SearchQuery>;\n    },\n    searchFacetValues(variables: SearchFacetValuesQueryVariables, options?: C): Promise<SearchFacetValuesQuery> {\n      return requester<SearchFacetValuesQuery, SearchFacetValuesQueryVariables>(SearchFacetValuesDocument, variables, options) as Promise<SearchFacetValuesQuery>;\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;"],
  "mappings": "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",
  "names": ["__assign", "OperationTypeNode", "DirectiveLocation", "Kind", "indent", "TokenKind", "instanceOf"]
}
