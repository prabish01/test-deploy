{
  "version": 3,
  "sources": ["../../../app/utils/use-toggle-state.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/use-toggle-state.tsx\"\n);\nimport.meta.hot.lastModified = \"1745508918464.2178\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\n\nexport type StateType = [boolean, () => void, () => void, () => void] & {\n  state: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n};\n\n/**\n *\n * @param initialState - boolean\n * @returns An array like object with `state`, `open`, `close`, and `toggle` properties\n *  to allow both object and array destructuring\n *\n * ```\n *  const [showModal, openModal, closeModal, toggleModal] = useToggleState()\n *  // or\n *  const { state, open, close, toggle } = useToggleState()\n * ```\n */\n\nconst useToggleState = (initialState = false) => {\n  const [state, setState] = useState<boolean>(initialState);\n\n  const close = () => {\n    setState(false);\n  };\n\n  const open = () => {\n    setState(true);\n  };\n\n  const toggle = () => {\n    setState((state) => !state);\n  };\n\n  const hookData = [state, open, close, toggle] as StateType;\n  hookData.state = state;\n  hookData.open = open;\n  hookData.close = close;\n  hookData.toggle = toggle;\n  return hookData;\n};\n\nexport default useToggleState;\n"],
  "mappings": ";;;;;;;;;;;AAWA,mBAAyB;AATzB,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAyBA,IAAM,iBAAiB,CAAC,eAAe,UAAU;AAC/C,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAkB,YAAY;AAExD,QAAM,QAAQ,MAAM;AAClB,aAAS,KAAK;AAAA,EAChB;AAEA,QAAM,OAAO,MAAM;AACjB,aAAS,IAAI;AAAA,EACf;AAEA,QAAM,SAAS,MAAM;AACnB,aAAS,CAACA,WAAU,CAACA,MAAK;AAAA,EAC5B;AAEA,QAAM,WAAW,CAAC,OAAO,MAAM,OAAO,MAAM;AAC5C,WAAS,QAAQ;AACjB,WAAS,OAAO;AAChB,WAAS,QAAQ;AACjB,WAAS,SAAS;AAClB,SAAO;AACT;AAEA,IAAO,2BAAQ;",
  "names": ["state"]
}
