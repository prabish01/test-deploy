{
  "version": 3,
  "sources": ["../../../app/routes/account.addresses.new.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/account.addresses.new.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/account.addresses.new.tsx\");\n  import.meta.hot.lastModified = \"1745508918461.1538\";\n}\n// REMIX HMR END\n\nimport { useActionData, useLoaderData, useNavigate, useNavigation, useSubmit } from '@remix-run/react';\nimport { json } from '@remix-run/server-runtime';\nimport { useRef, useEffect } from 'react';\nimport { validationError } from 'remix-validated-form';\nimport { Button } from '~/components/Button';\nimport Modal from '~/components/modal/Modal';\nimport { HighlightedButton } from '~/components/HighlightedButton';\nimport useToggleState from '~/utils/use-toggle-state';\nimport CustomerAddressForm, { validator } from '~/components/account/CustomerAddressForm';\nimport { createCustomerAddress } from '~/providers/account/account';\nimport { getAvailableCountries } from '~/providers/checkout/checkout';\nimport { useTranslation } from 'react-i18next';\nexport async function loader({\n  request,\n  params\n}) {\n  const {\n    availableCountries\n  } = await getAvailableCountries({\n    request\n  });\n  return json({\n    availableCountries\n  });\n}\nexport async function action({\n  request,\n  params\n}) {\n  const body = await request.formData();\n  const result = await validator.validate(body);\n  if (result.error) {\n    return validationError(result.error);\n  }\n  const {\n    data\n  } = result;\n  await createCustomerAddress({\n    city: data.city,\n    company: data.company,\n    countryCode: data.countryCode,\n    fullName: data.fullName,\n    phoneNumber: data.phone,\n    postalCode: data.postalCode,\n    province: data.province,\n    streetLine1: data.streetLine1,\n    streetLine2: data.streetLine2\n  }, {\n    request\n  });\n  return json({\n    saved: true\n  });\n}\nexport default function NewAddress() {\n  _s();\n  const {\n    availableCountries\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const actionData = useActionData();\n  const navigate = useNavigate();\n  const {\n    state,\n    close\n  } = useToggleState(true);\n  const {\n    t\n  } = useTranslation();\n  const formRef = useRef(null);\n  const submit = useSubmit();\n  useEffect(() => {\n    if (actionData?.saved) {\n      close();\n    }\n  }, [actionData]);\n  const submitForm = () => {\n    submit(formRef.current);\n  };\n  const afterClose = () => {\n    navigate(-1);\n  };\n  return <div>\n      <Modal isOpen={state} close={close} afterClose={afterClose}>\n        <Modal.Title>{t('address.new')}</Modal.Title>\n        <Modal.Body>\n          <CustomerAddressForm availableCountries={availableCountries} formRef={formRef} submit={submitForm}></CustomerAddressForm>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button type=\"button\" onClick={close}>\n            {t('common.cancel')}\n          </Button>\n          <HighlightedButton isSubmitting={navigation.state === 'submitting'} type=\"submit\" onClick={submitForm}>\n            {t('common.save')}\n          </HighlightedButton>\n        </Modal.Footer>\n      </Modal>\n    </div>;\n}\n_s(NewAddress, \"Mg5ovmdPF83LFAQt3MiVH4NhB1c=\", false, function () {\n  return [useLoaderData, useNavigation, useActionData, useNavigate, useToggleState, useTranslation, useSubmit];\n});\n_c = NewAddress;\nvar _c;\n$RefreshReg$(_c, \"NewAddress\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAAA,gBAAkC;AAkF1B;AAxGR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2CAA6C,EAAE;AAAA,EACxF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsC;AACtC,cAAY,IAAI,eAAe;AACjC;AAyDe,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM,WAAW,YAAY;AAC7B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,yBAAe,IAAI;AACvB,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,eAAe;AACnB,QAAM,cAAU,sBAAO,IAAI;AAC3B,QAAM,SAAS,UAAU;AACzB,+BAAU,MAAM;AACd,QAAI,YAAY,OAAO;AACrB,YAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,UAAU,CAAC;AACf,QAAM,aAAa,MAAM;AACvB,WAAO,QAAQ,OAAO;AAAA,EACxB;AACA,QAAM,aAAa,MAAM;AACvB,aAAS,EAAE;AAAA,EACb;AACA,SAAO,mDAAC,SACJ,6DAAC,iBAAM,QAAQ,OAAO,OAAc,YAClC;AAAA,uDAAC,cAAM,OAAN,EAAa,YAAE,aAAa,KAA7B;AAAA;AAAA;AAAA;AAAA,WAA+B;AAAA,IAC/B,mDAAC,cAAM,MAAN,EACC,6DAAC,uBAAoB,oBAAwC,SAAkB,QAAQ,cAAvF;AAAA;AAAA;AAAA;AAAA,WAAmG,KADrG;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,cAAM,QAAN,EACC;AAAA,yDAAC,UAAO,MAAK,UAAS,SAAS,OAC5B,YAAE,eAAe,KADpB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,qBAAkB,cAAc,WAAW,UAAU,cAAc,MAAK,UAAS,SAAS,YACxF,YAAE,aAAa,KADlB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAZF;AAAA;AAAA;AAAA;AAAA,SAaA,KAdG;AAAA;AAAA;AAAA;AAAA,SAeL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,eAAe,eAAe,eAAe,aAAa,0BAAgB,gBAAgB,SAAS;AAC7G,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
