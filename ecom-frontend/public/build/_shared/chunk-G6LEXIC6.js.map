{
  "version": 3,
  "sources": ["../../../app/providers/checkout/checkout.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/providers/checkout/checkout.ts\"\n);\nimport.meta.hot.lastModified = \"1745508918460.1826\";\n}\n// REMIX HMR END\n\nimport gql from 'graphql-tag';\nimport { QueryOptions, sdk } from '../../graphqlWrapper';\nimport { PaymentInput } from '~/generated/graphql';\n\nexport function getAvailableCountries(options: QueryOptions) {\n  return sdk.availableCountries({}, options);\n}\n\nexport function getEligibleShippingMethods(options: QueryOptions) {\n  return sdk.eligibleShippingMethods({}, options);\n}\n\nexport function getEligiblePaymentMethods(options: QueryOptions) {\n  return sdk.eligiblePaymentMethods({}, options);\n}\n\nexport function generateBraintreeClientToken(options: QueryOptions) {\n  return sdk.generateBraintreeClientToken({}, options);\n}\n\nexport function createStripePaymentIntent(options: QueryOptions) {\n  return sdk.createStripePaymentIntent({}, options);\n}\n\nexport function getNextOrderStates(options: QueryOptions) {\n  return sdk.nextOrderStates({}, options);\n}\n\nexport function addPaymentToOrder(input: PaymentInput, options: QueryOptions) {\n  return sdk.addPaymentToOrder({ input }, options);\n}\n\nexport function transitionOrderToState(state: string, options: QueryOptions) {\n  return sdk.transitionOrderToState({ state }, options);\n}\n\ngql`\n  query eligibleShippingMethods {\n    eligibleShippingMethods {\n      id\n      name\n      description\n      metadata\n      price\n      priceWithTax\n    }\n  }\n`;\n\ngql`\n  query eligiblePaymentMethods {\n    eligiblePaymentMethods {\n      id\n      code\n      name\n      description\n      eligibilityMessage\n      isEligible\n    }\n  }\n`;\n\ngql`\n  query nextOrderStates {\n    nextOrderStates\n  }\n`;\n\ngql`\n  query availableCountries {\n    availableCountries {\n      id\n      name\n      code\n    }\n  }\n`;\n\ngql`\n  mutation addPaymentToOrder($input: PaymentInput!) {\n    addPaymentToOrder(input: $input) {\n      ...OrderDetail\n      ... on ErrorResult {\n        errorCode\n        message\n      }\n    }\n  }\n`;\n\ngql`\n  mutation transitionOrderToState($state: String!) {\n    transitionOrderToState(state: $state) {\n      ...OrderDetail\n      ... on ErrorResult {\n        errorCode\n        message\n      }\n    }\n  }\n`;\n\ngql`\n  mutation createStripePaymentIntent {\n    createStripePaymentIntent\n  }\n`;\n\ngql`\n  query generateBraintreeClientToken {\n    generateBraintreeClientToken\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AA+BO,SAAS,kBAAkB,OAAqB,SAAuB;AAC5E,SAAO,IAAI,kBAAkB,EAAE,MAAM,GAAG,OAAO;AACjD;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
